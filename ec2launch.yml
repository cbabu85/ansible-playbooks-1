---
  - name: Instantiating an EC2 Instance
    hosts: localhost
    connection: local
    gather_facts: False
    become: no
    tags: instantiate
    # Necessary Variables for creating/provisioning the EC2 Instance
    vars_files:
      - "group_vars/vault.yml"
    vars:
      instance_type: t2.medium
      instance_name: apt-ebs-test3
      instance_class: demo-servers
      instance_orgtype: apt
      security_group: EBS-Scale-Test
      image: ami-cd0f5cb6
      region: us-east-1
      vpc_subnet_id: subnet-f92326bf
      vpc_id: vpc-0ce02669
      keypair: staging-test
      count: 1

    # Task that will be used to Launch/Create an EC2 Instance
    tasks:
      - name: Create a security group
        local_action:
          module: ec2_group
          name: "{{ security_group }}"
          description: Security Group for ebs-scale-test
          region: "{{ region }}"
          vpc_id: "{{vpc_id}}"
          rules:
            # Default SSH for provisioning
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 0.0.0.0/0
            # Non-Default SSH post-provision
            - proto: tcp
              from_port: 1984
              to_port: 1984
              cidr_ip: 0.0.0.0/0
          rules_egress:
            # Let the dogs out.
              - proto: all
                cidr_ip: 0.0.0.0/0


      - name: Launch the new EC2 Instance
        ec2:
          group: "{{security_group}}"
          id: "{{instance_name}}"
          instance_type: "{{ instance_type}}"
          termination_protection: yes
          image: "{{ image }}"
          region: "{{ region }}"
          keypair: "{{ keypair }}"
          count: "{{count}}"
          count_tag: "{{instance_name}}"
          vpc_subnet_id: "{{vpc_subnet_id}}"
          assign_public_ip: yes
          wait: yes
          instance_tags:
             Name: "{{ instance_name }}"
             purpose: "EBS scaling test"
             environment: "demo"
             orgtype: "{{instance_orgtype}}"
        register: ec2
        tags: ec2launch

      - name: Run instance run.
        local_action: ec2
                      instance_ids="{{item.id}}"
                      region="{{ item.region }}"
                      state=running
        with_items: "{{ ec2.instances }}"


     # TODO: Use add_hosts once upgraded to Ansible 2.4
      - name: Add the newly created EC2 instance(s) to the local host group (located inside the directory)
        local_action: lineinfile
                      dest="./hosts"
                      regexp="{{instance_name}} ansible_ssh_user=ubuntu hostname_name={{instance_name}} hostname_fqdn={{item.public_dns_name}} host_eip={{ item.public_ip }} instance_id={{item.id}}"
                      insertafter="\[{{instance_class}}\]"
                      line="{{instance_name}} ansible_ssh_user=ubuntu hostname_name={{instance_name}} hostname_fqdn={{item.public_dns_name}} host_eip={{ item.public_ip }} instance_id={{item.id}}"
        with_items: "{{ ec2.instances }}"

      - name: Add the newly created EC2 instance(s) to the local ssh hosts
        delegate_to: localhost
        blockinfile:
          path: "~/.ssh/config"
          block: |
                  Host {{instance_name}}
                  Hostname "{{item.public_dns_name}}"
                  User ubuntu
                  IdentityFile "~/.ssh/{{keypair}}.pem"
          marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.tags['Name'] }}"
        with_items: "{{ ec2.instances }}"


      - name: Wait for SSH to come up
        local_action: wait_for
                      host={{ item.public_ip }}
                      port=22
                      state=started
        with_items: "{{ ec2.instances }}"
        when: ec2|changed

      - name: Add tag to Instance(s)
        local_action: ec2_tag resource={{ item.id }} region={{ region }} state=present
        with_items: "{{ ec2.instances }}"
        args:
          tags:
            Name: "{{instance_name}}"
            Purpose: "EBS-TEST"
            environment: demo
            orgtype: "{{instance_orgtype}}"

      - name: Create and attach base EBS volume
        ec2_vol:
          instance: "{{item.id}}"
          name: "{{instance_name}}_data"
          device_name: "/dev/xvdf"
          volume_type: gp2
          volume_size: 100
          region: "{{ region }}"
          tags:
            Name: "{{instance_name}}_data"
            Purpose: "EBS-TEST"
            environment: demo
            orgtype: "{{instance_orgtype}}"
        with_items: "{{ec2.instances}}"
        register: ec2_vol_facts

      - name: spill the beans
        debug: var=ec2_vol_facts.results


  - hosts: apt-ebs-test3
    gather_facts: False
    tags: provisionpython
    tasks:
        - name: install python 2
          raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)

  - name: Provision an EC2 Instance
    # TODO: prohibits the use of a loop. rethink this.
    hosts: apt-ebs-test3
    become: yes
    tags: provision
    vars_files:
      - "group_vars/vault.yml"
    vars:
      instance_type: t2.medium
      instance_name: apt-ebs-test3
      instance_class: demo-servers
      instance_orgtype: apt
      security_group: ebs_scale_test # Change the security group name here
      image: ami-cd0f5cb6
      region: us-east-1
      keypair: staging-test
      count: 1
      aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
      aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"

      lvm_vgroup: "{{instance_name}}_lvmdata"
      lvm_lvname: data
      lvm_lvsize: 90g
      lvm_filesystem: ext4

    pre_tasks:
     - name: Install python for Ansible
       raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)
       register: output
       changed_when: output.stdout != ""
     - setup: # aka gather_facts

    roles:
      - { role: common, tags: common}

    tasks:
      - name: Gather AWS Facts
        ec2_remote_facts:
          filters:
            "tag:Name": "{{instance_name}}"
          region: "{{region}}"
          aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
          aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
        register: ec2vol


  # LVM SETUP
  # Volume Group is a named collection of physical and logical volumes
      - name: Install LVM packages
        apt: name=lvm2 state=latest

## INSTALL reference https://gist.githubusercontent.com/mrlesmithjr/1da992b648771b9afd50/raw/33a9e42c4148553fc73fefbf33b97b3d1ea35495/confg_lvm.yml
# lvm_vgroup: Volume group to be named after instance_vg
# lvm_lvname: Logical volume name
# lvm_vsize: Logical volume size
# lvm_filesystem: FS, ext4
      - name: Create new LVM volume group
        lvg: vg={{ lvm_vgroup }} pvs=/dev/xvdf state=present

      - name: Create new LVM logical volume
        lvol: vg={{ lvm_vgroup }} lv={{ lvm_lvname }} size={{ lvm_lvsize }}
        # when: create and config_lvm

      - name: Create new filesystem on new LVM logical volume
        filesystem: fstype={{ lvm_filesystem }} dev=/dev/{{ lvm_vgroup }}/{{ lvm_lvname }}
        register: fsstats
       # when: create and config_lvm

# TODO: Mount dest should be a variable.
      - name: Mount EBS data drive
        mount:
          src: /dev/{{lvm_vgroup}}/{{lvm_lvname}}
          path: /mnt/ebs
          fstype: ext4
          state: mounted

# TODO:
# x mount ebs drive
# x mkfs ext4 on drive, add conditional if needed
# - Create LVM, extend it if already there
# - Add ebs scale script.
# - Add ebs scale script cron job?
#

