---
# This playbook installs icinga2 client on the monitoring nodes.
# By limiting the playbook execution to a certain host it will only install
# icinga2 on this host and register it with the appropriate icinga2 masternode.
# ansible-playbook icinga2-headless-node.yml -l apt-somehost"

- hosts: "{{ ansible_hostname | default('all')}}"
  gather_facts: True
  vars_files:
      - "group_vars/vault.yml"
  vars:
   # Don't install more plugins
   nagios_plugins: False

  roles:
    - role: icinga2-ansible/icinga2-ansible-no-ui
      check_commands:
         check_nrpe: |
            "-H", "$address$",
                "-c", "$remote_nrpe_command$",
      tags: icinga2-no-ui
  tasks:
    - name: Enable API feature
      become: true
      shell: icinga2 feature enable api

    - name: generate ticket on the icinga master and save it as a variable
      shell: /usr/sbin/icinga2 pki ticket --cn {{ ansible_hostname }}.aptrust.org
      register: ticket
      tags: tickets
      delegate_to: "{{icinga2_master_host}}"

    - name: create pki folder
      file: path=/etc/icinga2/pki state=directory mode=0700 owner=nagios group=nagios
      tags: nodeaction

    - name: create cert on new node
      shell: icinga2 pki new-cert --cn "{{ ansible_hostname }}.aptrust.org" --key "/etc/icinga2/pki/{{ ansible_hostname }}.key" --cert "/etc/icinga2/pki/{{ ansible_hostname }}.crt"
      tags: nodeaction

    - name: save the masters cert as trustedcert
      shell: icinga2 pki save-cert --key "/etc/icinga2/pki/{{ ansible_hostname }}.key" --cert "/etc/icinga2/pki/{{ ansible_hostname }}.crt" --trustedcert /etc/icinga2/pki/trusted-master.crt --host "{{ icinga2_master_hostname }}"
      become: yes
      tags: nodeaction

    - name: request the certificate from the icinga server
      shell: icinga2 pki request --host "{{ icinga2_master_hostname }}" --port 5665 --ticket "{{ticket.stdout}}" --key "/etc/icinga2/pki/{{ ansible_hostname }}.key" --cert "/etc/icinga2/pki/{{ ansible_hostname }}.crt" --trustedcert "/etc/icinga2/pki/trusted-master.crt" --ca "/etc/icinga2/pki/ca.key"
      tags: nodeaction

    - name: node setup
      shell: icinga2 node setup --ticket {{ ticket.stdout }} --endpoint {{ icinga2_master_hostname }} --zone {{ ansible_hostname }}.aptrust.org --master_host {{ icinga2_master_hostname }} --trustedcert /etc/icinga2/pki/trusted-master.crt --cn {{ ansible_hostname }}.aptrust.org --accept-config --accept-commands
      tags: nodeaction

    - name: Add global zone
      tags: ['nodeedit']
      lineinfile: >
        dest="/etc/icinga2/zones.conf"
        line="object Zone "global" { global = true }"
        regexp="^object Zone "global" { global = true }"
        state=present
      register: globalzone

    - name: Restart icinga2
      tags: ['nodeedit']
      when: globalzone|changed
      service: name=icinga2 state=restarted

- hosts: "{{ icinga2_master_host | default('monitoring_servers')}}"
  tags: ['masteraction']
  tasks:

   - name: insert/update zones.conf
     tags: ['updatefiles']
     blockinfile:
         dest: /etc/icinga2/zones.conf
         marker: "# {mark} ANSIBLE MANAGED BLOCK {{ansible_hostname}}"
         block: |
            object Endpoint "{{ansible_hostname}}.aptrust.org" {
                host = "{{ansible_hostname}}.aptrust.org"
                port = "5665"
            }
            object Zone "{{ansible_hostname}}.aptrust.org" {
                parent = "master"
                endpoints = [ "{{ansible_hostname}}.aptrust.org" ]
            }

   - name: insert/update hosts.conf
     tags: ['updatefiles']
     blockinfile:
         dest: "/etc/icinga2/zones.d/master/hosts.conf"
         marker: "# {mark} ANSIBLE MANAGED BLOCK {{ansible_hostname}}"
         block: |
            object Host "{{ansible_hostname}}.aptrust.org" {
                import "Icinga Agent"
                display_name = "{{ansible_hostname}}"
                address = "{{ansible_hostname}}.aptrust.org"

                enable_notifications = true
                vars.os = "Linux"
                vars.disks["disk"] = {}
                vars.ssh_port = "1984"
                vars.notification["mail"] = {
                  groups = [ "apt-ops-group" ]
              }
            }

   - name: restart icinga2
     tags: ['updatefiles']
     service: name=icinga2 state=restarted

