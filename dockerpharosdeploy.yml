---
#   - a .env file in the code root (with sensible defaults)
# The instance to deploy to requires to be internet reachable on 80/443.
# Pharos:
# All required changes should be env vars in the .env var for deploys in
# different environemnts.
#
##  - Base dir for docker apps is /srv/docker/<appname>/{data,repo}
#     The repo subdir is used to clone the github repo into
#     The data subdir is used for storing persistent data if volume bind-mounts are used.
#
# Workflow:
# 1.    Make sure /srv/docker dir exists
# 1.1   Make sure Docker is installed and Gitlab registry is setup.
# 2.    If apprepo defined, git clone into /srv/docker/appname/repo
# 2.1   if apprepo defined, and git repo exists, run git pull in repo
# 3.    If apphub defined, just do a docker run
-   hosts: docker1
    vars_files:
        - "group_vars/vault.yml"

    vars:

        # Dockerapp config
        dockerapp: 'pharos' #Docker app name
        dockerapp_path: "/srv/docker/{{dockerapp}}"
        dockerapp_data_path: "/srv/docker/{{dockerapp}}/data"
        dockerapp_repo: "https://github.com/APtrust/pharos"
        git_version: feature/two_factor #git branch/commit
        docker_image_name: "aptrust/container-registry/{{dockerapp}}"
        docker_container_name: pharos
        DOCKER_DOMAIN: docker1.aptrust.org
        # Docker tag or commit hash to pull correct Docker image.
        #       docker_tag_name: 17be2ae
        #        docker_tag_name: d85a94f
        # docker_tag_name: latest

        # Pharos config
        virtual_host: twofactor.docker1.aptrust.org

        #pharos_db_host: 'pharos-demo-demo.cbtzcfmydoc1.us-east-1.rds.amazonaws.com'
        ## Test case 1: local PSQL, from scratch
        #        pharos_db_host: 'db'
        #        pharos_db_user: 'apt_pharos'
        # pharos_db_password: 'preservationiscool'
        #pharos_branch: "{{dockerapp_version}}"
        pharos_db_host: 'pharos-demo-demo2.cbtzcfmydoc1.us-east-1.rds.amazonaws.com'
        pharos_db_port: '5431'
        pharos_db_name: 'pharos_demo'
        pharos_db_user: 'apt_pharos'
        pharos_cronjobs:
            pharos_notify:
                hour: "*/10"
                minute: "*"
                params: ''
                disabled: 'yes'
            pharos_snapshot:
                hour: "1"
                minute: "1"
                day: "1"
                params: '-o snapshot'
                disabled: 'yes'
            pharos_deletion:
                hour: "1"
                minute: "2"
                day: "1"
                params: '-o deletion'
                disabled: 'yes'


    tasks:

      - name: Setup dockerapp directory structure
        file:
          path: "{{item.0}}/{{item.1}}"
          owner: "{{system_default_user}}"
          group: "{{system_default_user}}"
          mode: 0755
          state: directory
        with_nested:
            - "{{dockerapp_path}}"
            - ['repo','data']
        tags: makdir

      - name: Set commit-version fact
        set_fact: git_version="{{docker_tag_name}}"
        when: docker_tag_name is defined and docker_tag_name != 'latest'
        tags: gitclone

      - name: Git clone the {{dockerapp}} repo
        git:
          repo: "{{dockerapp_repo}}"
          dest: "{{dockerapp_path}}/repo"
          version: "{{git_version}}"
          accept_hostkey: yes
          clone: yes
          force: yes
          update: yes
          umask: '0022'
        when: dockerapp_repo is defined
        tags: gitclone

      - name: get revision
        shell: /bin/bash -c "cd {{dockerapp_path}}/repo && git rev-parse --short HEAD"
        register: revision
        tags: revs

      - set_fact: pharos_release="{{revision.stdout}}"
        tags: revs

      - name: Update .env vars
        template:
          src: roles/aptrust.pharos/templates/.env.j2
          dest: "{{dockerapp_path}}/repo/.env"
          owner: "{{system_default_user}}"
          group: "{{system_default_group}}"
          mode: 0644

      - name: Touch traefik/acme files if non-existent
        file:
          path: "{{dockerapp_path}}/data/{{item}}"
          owner: "{{system_default_user}}"
          group: "{{system_default_user}}"
          mode: 0600
          state: touch
        with_items:
            - acme.json
            - traefik.toml
        tags: makdir

      - name: Setup Pharos Cron Jobs
        # sudo docker run --rm --env-file .env -it aptrust/pharos:32ca2b4 bin/pharos_notify.py -o snapshot
        # Alternative separate microservice: http://issamben.com/how-to-run-cron-jobs-with-docker/
        # or https://jonathas.com/scheduling-tasks-with-cron-on-docker/
        cron: name="{{item.key}}"
              user="{{system_default_user}}"
              minute="{{item.value.minute | default('*')}}"
              hour="{{item.value.hour | default('*')}}"
              day="{{item.value.day | default('*')}}"
              month="{{item.value.month | default('*')}}"
              job="sudo docker run --rm --env-file {{dockerapp_path}}/repo/.env
              --it {{docker_image_name}}:{{docker_tag_name | default('latest')}}
                   bin/pharos_notify.py {{item.value.params | default('')}}"
              state=present
              disabled=yes
        with_dict: "{{pharos_cronjobs}}"

      - name: Start docker containers from compose
        docker_service:
           project_name: "{{dockerapp}}"
           project_src: "{{dockerapp_path}}/repo"
           files: docker-compose.traefik.yml
           pull: yes
        tags: dockserv
      - name: whoami
        become: no
        local_action: shell whoami
        register: whobrokeit
        tags: [pharos,slack,deploy]

      - name: Slack to all
        slack:
          token: "{{slack_token}}"
          msg: "Docker Pharos deployment on {{ inventory_hostname }}  by user {{whobrokeit.stdout}} completed"
          icon_emoji: ":dog:"
          channel: 'ops'
        tags: [pharos,slack, deploy]
