
# It assumes that the repo includes
#   - a docker-compose.yml in the code root
#   - a .env file in the code root (with sensible defaults)
# The instance to deploy to requires to be internet reachable on 80/443.
# Pharos:
# All required changes should be env vars in the .env var for deploys in
# different environemnts.
#
##  - Base dir for docker apps is /srv/docker/<appname>/{data,repo}
#     The repo subdir is used to clone the github repo into
#     The data subdir is used for storing persistent data if volume bind-mounts are used.
#
# Workflow:
# 1.    Make sure /srv/docker dir exists
# 1.1   Make sure Docker is installed and Gitlab registry is setup.
# 2.    If apprepo defined, git clone into /srv/docker/appname/repo
# 2.1   if apprepo defined, and git repo exists, run git pull in repo
# 3.    If apphub defined, just do a docker run
---
-   hosts: all
    vars_files:
        - "group_vars/vault.yml"

    vars:

        # Dockerapp config
        dockerapp: 'pharos' #Docker app name
        dockerapp_path: "/srv/docker/{{dockerapp}}"
        dockerapp_repo: "https://github.com/APtrust/pharos"
        dockerapp_version: docker
        docker_image_name: "aptrust/container-registry/{{dockerapp}}"
        docker_container_name: pharos
        docker_tag_name: latest
        #                        config_dir: /root/.docker
        #                    basedir: /bestsellers
        #                        datadir: "{{ basedir }}/data"
        #                            imagedir: "{{ basedir }}/images"
        #                                listen_port: 8466


        # Pharos config
        nginx_virtual_host: pharos2.docker1.aptrust.org

        #pharos_db_host: 'pharos-demo-demo.cbtzcfmydoc1.us-east-1.rds.amazonaws.com'
        ## Test case 1: local PSQL, from scratch
        pharos_db_host: 'db'
        pharos_db_user: 'apt_pharos'
        pharos_db_password: 'preservationiscool'

    tasks:

      - name: Setup dockerapp directory structure
        file:
          path: "{{item.0}}/{{item.1}}"
          owner: "{{system_default_user}}"
          group: "{{system_default_user}}"
          mode: 0755
          state: directory
        with_nested:
            - "{{dockerapp_path}}"
            - ['repo','data']
        tags: makdir

      - name: Git clone the {{dockerapp}} repo
        git:
          repo: "{{dockerapp_repo}}"
          dest: "{{dockerapp_path}}/repo"
          version: "{{dockerapp_version}}"
          accept_hostkey: yes
          clone: yes
          force: yes
          update: yes
          umask: '0022'
        when: dockerapp_repo is defined

      - name: Update .env vars
        template:
          src: roles/aptrust.pharos/templates/.env.j2
          dest: "{{dockerapp_path}}/repo/.env"
          owner: "{{system_default_user}}"
          group: "{{system_default_group}}"
          mode: 0644

      - name: Touch traefik/acme files if non-existent
        file:
          path: "{{dockerapp_path}}/data/{{item}}"
          owner: "{{system_default_user}}"
          group: "{{system_default_user}}"
          mode: 0755
          state: touch
        with_items:
            - acme.json
            - traefik.toml
        tags: makdir

      - name: Start docker containers from compose
        docker_service:
           project_name: "{{dockerapp}}"
           project_src: "{{dockerapp_path}}/repo"
           pull: yes
        tags: dockserv
