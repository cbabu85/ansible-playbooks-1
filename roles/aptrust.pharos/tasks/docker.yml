---
# TODO: Cron jobs containers??
#docker run -it --rm alpine sh -c "echo \"* * * * * echo hello\" | crontab - && crond -f -L -"
#docker run -it --rm alpine sh -c "echo \"* * * * * echo hello\" | crontab - && crond -f -L -"
#
## Create DB on RDS if it doesn't exist.
# Note: When command is changed to modify, comment [db_name, subnet, tags] out.
  - name: Create DB on RDS
    rds:
        command: create
        instance_name: "{{ pharos_rds_instance_name }}"
        instance_type: "{{ pharos_rds_instance_type | default('db.t2.small') }}"
        size: "{{pharos_db_size | default('16') }}"
        username: "{{pharos_db_user}}"
        password: "{{pharos_db_pwd}}"
        db_name: "{{pharos_db_name}}"
        db_engine: postgres
        multi_zone: "{{pharos_rds_multi_az | default('no')}}"
        region: "{{pharos_rds_region | default('us-east-1')}}"
# TODO: dependent on environment. set default to demo
# Note: security group name doesn't work, only id. Security groups have to be
#       configured manually via AWS web console.
        vpc_security_groups: "{{  pharos_vpc_sec_group | default('sg-65b4211f') }}"
        subnet: "{{ pharos_rds_subnet | default('demo') }}"
# Note: Timeout is set high since inital RDS creation may take a while.
        wait_timeout: 600
        wait: yes
        aws_access_key: "{{ lookup('env','AWS_ACCESS_KEY_ID') }}"
        aws_secret_key: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"
        backup_retention: "{{pharos_rds_backup_retention | default('1')}}"
        backup_window: '10:00-10:30'
        maint_window: 'Tue:10:30-Tue:11:00'
        tags:
            Environment: "{{RAILS_ENV}}"
    tags: createrds, dd
    register: rds_facts
    when: pharos_local_db and pharos_setup

  - name: Set RDS db_host fact
    set_fact: pharos_db_host="{{rds_facts.instance.endpoint}}"
    when: pharos_local_db and pharos_setup
    tags: dd

    # Note: For docker environments this means that the db port needs to be
    # mapped to the docker host port, e.g. 5432:5432
  - name: Set local db_host fact
    set_fact: pharos_db_host="localhost"
    when: pharos_local_db == true

  - name: Setup dockerapp directory structure
    file:
      path: "{{item}}"
      owner: "{{system_default_user}}"
      group: "{{system_default_user}}"
      mode: 0775
      recurse: true
      state: directory
    with_items:
      - "{{docker_app_path}}"
      - "{{docker_data_path}}"
      - "{{docker_data_path}}/log"
    tags: makdir

  - name: Set commit-version fact
    set_fact: git_version="{{docker_tag_name}}"
    when: docker_tag_name is defined and docker_tag_name != 'latest'
    tags: gitclone

    # https://github.com/ansible/ansible/issues/19809
  - name: Reset repo for Ansible bug
    command: git reset --hard
    args:
        chdir: "{{docker_app_path}}"
    tags: gitclone

  - name: Git clone Pharos repo
    git:
      repo: "{{pharos_repo}}"
      dest: "{{docker_app_path}}"
      version: "{{git_version}}"
      accept_hostkey: yes
      clone: yes
      force: yes
      update: yes
      umask: '0022'
    when: pharos_repo is defined
    tags: gitclone

  - name: get revision
    shell: /bin/bash -c "cd {{docker_app_path}} && git rev-parse --short HEAD"
    register: revision
    tags: revs, update_env

  - set_fact: pharos_release="{{revision.stdout}}"
    tags: revs, update_env

  - name: Update .env vars
    template:
      src: .env.j2
      dest: "{{docker_app_path}}/.env"
      owner: "{{system_default_user}}"
      group: "{{system_default_group}}"
      mode: 0644
    tags: update_env

    #  - name: Update traefik.toml
    #    template:
    #      src: traefik.toml.j2
    #      dest: "{{docker_data_path}}/traefik.toml"
    #      owner: "{{system_default_user}}"
    #      group: "{{system_default_group}}"
    #      mode: 0664


# TODO: traefik.toml should be templatized. acme. json touch is ok since its generated
#  - name: Touch traefik/acme files if non-existent
#    file:
#      path: "{{docker_data_path}}/{{item}}"
#      owner: "{{system_default_user}}"
#      group: "{{system_default_user}}"
#      mode: 0600
#      state: touch
#    with_items:
#      - acme.json
#      - traefik.toml
#    tags: makdir

  - name: Setup Pharos Cron Jobs
    # sudo docker run --rm --env-file .env aptrust/pharos:32ca2b4 bin/pharos_notify.py -o snapshot
    # Alternative separate microservice: http://issamben.com/how-to-run-cron-jobs-with-docker/
    # or https://jonathas.com/scheduling-tasks-with-cron-on-docker/
    cron:
        name: "{{item.key}}"
        user: "{{system_default_user}}"
        minute: "{{item.value.minute | default('*')}}"
        hour: "{{item.value.hour | default('*')}}"
        day: "{{item.value.day | default('*')}}"
        month: "{{item.value.month | default('*')}}"
        job: "sudo docker run --rm --env-file {{docker_app_path}}/.env \
        {{docker_image_name}}:{{docker_tag_name | default('latest')}} \
         bin/pharos_notify.py {{item.value.params | default('')}} >> {{docker_data_path}}/log/cron_{{item.key}}.log 2>&1"
        state: present
        disabled: "{{item.value.disabled}}"
    with_dict: "{{pharos_cronjobs}}"
    tags: pharos_cronjobs

# Primarily to remov Docker asset volume with every deploy to ensure it's being
# recreated with every compose up. If this doesn't happen the assets are not
# updated and nginx-proxy may use an outdated asset volume.
# TODO: This is a workaround, find a better solution.
  - name: Stop docker containers compose
    docker_service:
        project_src: "{{docker_app_path}}"
        files: docker-compose.yml
        remove_volumes: true
        state: absent
    tags: dockserv

  - name: Start docker containers from compose
    docker_service:
        project_src: "{{docker_app_path}}"
        files: docker-compose.yml
        pull: true
        #        recreate: always
    tags: dockserv
