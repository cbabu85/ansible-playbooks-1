---

# Prerequisite: Installed docker daemon
# Initial deploy
# - Create /srv/docker/pharos directory as workdir
# - Git pull -o githash pharos into workdir (creates pharos dir in /srv/docker/pharos/githash)
# - cd githashdir & docker-compose build
# - Create /srv/docker/pharos/logs and symlink to current checkout logs in githash dir
# - cd githashdir && populare .env-file
# - cd githashdir && docker-compose up -d -f docker-compose.yml -f docker-compose.production.yml (production will add env file. that is populated and created by Ansible)
# Update deploy
# -  git pull into githash dir
# - cd githashdir & docker-compose build
# -
# - cd workdir/pharos
# - Diff between docker-compose.yml and docker-compose-rds.yml
# - create /srv/docker/pharos/nginx and copy nginx conf.
# - docker-compose build
# - docker-compose up


# TODO: Cron jobs containers??
#docker run -it --rm alpine sh -c "echo \"* * * * * echo hello\" | crontab - && crond -f -L -"
#docker run -it --rm alpine sh -c "echo \"* * * * * echo hello\" | crontab - && crond -f -L -"
#
## Create DB on RDS if it doesn't exist.
# Note: When command is changed to modify, comment [db_name, subnet, tags] out.
  - name: Create DB on RDS
    rds:
        command: create
        instance_name: "{{ pharos_rds_instance_name }}"
        instance_type: "{{ pharos_rds_instance_type | default('db.t2.small') }}"
        size: "{{pharos_db_size | default('16') }}"
        username: "{{pharos_db_user}}"
        password: "{{pharos_db_pwd}}"
        db_name: "{{pharos_db_name}}"
        db_engine: postgres
        multi_zone: "{{pharos_rds_multi_az | default('no')}}"
        region: "{{pharos_rds_region | default('us-east-1')}}"
# TODO: dependent on environment. set default to demo
# Note: security group name doesn't work, only id. Security groups have to be
#       configured manually via AWS web console.
        vpc_security_groups: "{{  pharos_vpc_sec_group | default('sg-65b4211f') }}"
        subnet: "{{ pharos_rds_subnet | default('demo') }}"
# Note: Timeout is set high since inital RDS creation may take a while.
        wait_timeout: 600
        wait: yes
        aws_access_key: "{{ lookup('env','AWS_ACCESS_KEY_ID') }}"
        aws_secret_key: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"
        backup_retention: "{{pharos_rds_backup_retention | default('1')}}"
        backup_window: '10:00-10:30'
        maint_window: 'Tue:10:30-Tue:11:00'
        tags:
            Environment: "{{RAILS_ENV}}"
    tags: createrds, dd
    register: rds_facts
    when: pharos_local_db == False

  - name: Set RDS db_host fact
    set_fact: pharos_db_host="{{rds_facts.instance.endpoint}}"
    when: pharos_local_db == False
    tags: dd

    # Note: For docker environments this means that the db port needs to be
    # mapped to the docker host port, e.g. 5432:5432
  - name: Set local db_host fact
    set_fact: pharos_db_host="localhost"
    when: pharos_local_db == true

  - name: Setup dockerapp directory structure
    file:
      path: "{{item.0}}/{{item.1}}"
      owner: "{{system_default_user}}"
      group: "{{system_default_user}}"
      mode: 0755
      state: directory
    with_nested:
      - "{{dockerapp_path}}"
      - ['repo','data']
    tags: makdir

  - name: Set commit-version fact
    set_fact: git_version="{{docker_tag_name}}"
    when: docker_tag_name is defined and docker_tag_name != 'latest'
    tags: gitclone

  - name: Git clone the {{dockerapp}} repo
    git:
      repo: "{{dockerapp_repo}}"
      dest: "{{dockerapp_path}}/repo"
      version: "{{git_version}}"
      accept_hostkey: yes
      clone: yes
      force: yes
      update: yes
      umask: '0022'
    when: dockerapp_repo is defined
    tags: gitclone

  - name: get revision
    shell: /bin/bash -c "cd {{dockerapp_path}}/repo && git rev-parse --short HEAD"
    register: revision
    tags: revs

  - set_fact: pharos_release="{{revision.stdout}}"
    tags: revs

  - name: Update .env vars
    template:
      src: .env.j2
      dest: "{{dockerapp_path}}/repo/.env"
      owner: "{{system_default_user}}"
      group: "{{system_default_group}}"
      mode: 0644

  - name: Touch traefik/acme files if non-existent
    file:
      path: "{{dockerapp_path}}/data/{{item}}"
      owner: "{{system_default_user}}"
      group: "{{system_default_user}}"
      mode: 0600
      state: touch
    with_items:
      - acme.json
      - traefik.toml
    tags: makdir

  - name: Setup Pharos Cron Jobs
    # sudo docker run --rm --env-file .env -it aptrust/pharos:32ca2b4 bin/pharos_notify.py -o snapshot
    # Alternative separate microservice: http://issamben.com/how-to-run-cron-jobs-with-docker/
    # or https://jonathas.com/scheduling-tasks-with-cron-on-docker/
    cron: |
      name="{{item.key}}"
      user="{{system_default_user}}"
        minute="{{item.value.minute | default('*')}}"
        hour="{{item.value.hour | default('*')}}"
        day="{{item.value.day | default('*')}}"
        month="{{item.value.month | default('*')}}"
        job="sudo docker run --rm --env-file {{dockerapp_path}}/repo/.env
      --it {{docker_image_name}}:{{docker_tag_name | default('latest')}}
         bin/pharos_notify.py {{item.value.params | default('')}}"
          state=present
        disabled="{{item.value.disabled}}"
    with_dict: "{{pharos_cronjobs}}"

  - name: Start docker containers from compose
    docker_service:
        project_name: "{{dockerapp}}"
        project_src: "{{dockerapp_path}}/repo"
        files: docker-compose.traefik.yml
        pull: yes
    tags: dockserv
