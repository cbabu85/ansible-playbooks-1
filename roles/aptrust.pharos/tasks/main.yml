---
# This installs Pharos from github.com/APTrust/pharos
# Deployment is handled by Ansistrano. https://github.com/ansistrano/deploy
# Variable defaults are set for a development/demo environment.

  - name: install required packages
    become: yes
    apt: pkg={{item}} state=present update_cache=yes
    with_items:
        - sqlite3
        - libssl-dev
        - postgresql-client
        - libpq5
        - libpqxx-dev
        - libxrender1 #Required for PDF report generation
        - libsqlite3-dev
        - nodejs
        - zip
        - mailutils
    environment:
       DEBIAN_FRONTEND: noninteractive
    tags:
        - packages
        - rails dependencies

# Set ruby interpreter version for pharos
  - name: Set Ruby interpreters ruby_version
    shell: bash -lc "rbenv local {{ruby_version}}"
    args:
      chdir: "{{pharos_app_root}}"
      creates: "{{pharos_app_root}}/.ruby-version"
    environment: "{{ruby_env}}"
    become: yes
    become_user: "{{ system_default_user }}"
    tags: rbenv_pharos

# Install Bundler
  - name: Install Bundler
    become: true
    become_user: "{{ system_default_user }}"
    gem: name=bundler state=latest

# Install Gems from Gemfile
  - name: Install Pharos gems
    become: true
    become_user: "{{ system_default_user }}"
    bundler: state=present chdir="{{pharos_app_root}}"

# Create DB on RDS if it doesn't exist.
# Note: When command is changed to modify, comment [db_name, subnet, tags] out.
  - name: Create DB on RDS
    rds:
        command: create
        instance_name: "{{ pharos_rds_instance_name }}"
        instance_type: "{{ pharos_rds_instance_type | default('db.t2.small') }}"
        size: "{{pharos_db_size | default('16') }}"
        username: "{{pharos_db_user}}"
        password: "{{pharos_db_pwd}}"
        db_name: "{{pharos_db_name}}"
        db_engine: postgres
        multi_zone: "{{pharos_rds_multi_az | default('no')}}"
        region: "{{pharos_rds_region | default('us-east-1')}}"
# TODO: dependent on environment. set default to demo
# Note: security group name doesn't work, only id. Security groups have to be
#       configured manually via AWS web console.
        vpc_security_groups: "{{  pharos_vpc_sec_group | default('sg-65b4211f') }}"
        subnet: "{{ pharos_rds_subnet | default('demo') }}"
# Note: Timeout is set high since inital RDS creation may take a while.
        wait_timeout: 600
        wait: yes
        aws_access_key: "{{ lookup('env','AWS_ACCESS_KEY_ID') }}"
        aws_secret_key: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"
        backup_retention: "{{pharos_rds_backup_retention | default('1')}}"
        backup_window: '10:00-10:30'
        maint_window: 'Tue:10:30-Tue:11:00'
        tags:
            Environment: "{{RAILS_ENV}}"
    tags: createrds, dd
    register: rds_facts
    when: pharos_local_db == False

# Note: Can be overridden with command line variable ... -e pharos_db_host=something.db.com
  - name: Set RDS db_host fact
    set_fact: pharos_db_host="{{rds_facts.instance.endpoint}}"
    when: pharos_local_db == False
    tags: dd

  - name: Set local db_host fact
    set_fact: pharos_db_host="localhost"
    when: pharos_local_db == true

# TODO: May want to add a task if a non-RDS db instance already exists.
#       In which case we will need an db address to connect to.
  - include: postgresql.yml
    when: pharos_local_db == true

# Note: This creates a dependency on ansistrano-deploy
  - name: Get Git Hash Fact
    shell: tail -n1 "{{pharos_app_root}}/REVISION" | cut -c1-5
    register: pharos_timestamp
    tags: appenv

  - name: Set Release fact
    set_fact: PHAROS_RELEASE="{{pharos_timestamp.stdout}}"
    tags: appenv

  - name: Define application environment configuration
    template:
        src: application.yml.j2
        dest: "{{pharos_app_root}}/config/application.yml"
        owner: "{{system_default_user}}"
        group: "{{deploy_group}}"
        mode: 0644
    vars:
        PHAROS_RELEASE: "{{PHAROS_RELEASE}}"
    tags: appenv

  - name: Set PHAROS API system user credentials as ENV
    no_log: true
    lineinfile: >
      dest="/home/{{system_default_user}}/.profile"
      state=present
      regexp="{{item.name}}=.*"
      line="export {{item.name}}={{item.value}}"
    with_items:
      - { name: "PHAROS_HOST", value: "{{ansible_fqdn}}"}
      - { name: "PHAROS_API_USER", value: "{{pharos_system_user}}"}
      - { name: "PHAROS_API_KEY", value: "{{pharos_system_user_key}}"}
    tags: pharos_api_env

    #  - name: Temporarily rename pharos_db string to prod for migration test
    # replace:
    #   path: "{{pharos_app_root}}/config/database.yml"
    #   regexp: "  database: pharos_demo$"
    #   replace: "  database: pharos_production"
    # tags: repldb

# Only loads DB schema at first deploy. Skipped when .schema_loaded exists
# Note: Careful! This assumes pharos has been deployed with this role before.
#       Otherwise the DB might be wiped!
#       Creates .schema_loaded file to skip this task if the RAILS_ENV when
#       conditional fails.
  - name: Load DB Schema at first deploy
    shell: "bundle exec rake db:schema:load RAILS_ENV={{RAILS_ENV}} && touch log/.schema_loaded"
    args:
        chdir: "{{pharos_app_root}}"
        creates: "{{pharos_app_root}}/log/.schema_loaded"
    become: true
    become_user: "{{ system_default_user }}"
    when: not RAILS_ENV | search ("production|demo")
    tags: dbmigrate,schema

  - name: Migrate DB Schema
    shell: chdir="{{pharos_app_root}}" bundle exec rake db:migrate RAILS_ENV="{{RAILS_ENV}}"
    become: true
    become_user: "{{ system_default_user }}"
    notify: reload nginx
    tags: dbmigrate

# Creates institutions, roles and users
  - name: Initial Pharos setup
    shell: chdir="{{pharos_app_root}}" bundle exec rake pharos:setup RAILS_ENV="{{RAILS_ENV}}"
    become: true
    become_user: "{{ system_default_user }}"
    when: pharos_setup

  - name: Assets precompile
    shell: chdir="{{pharos_app_root}}" bundle exec rake assets:precompile RAILS_ENV="{{RAILS_ENV}}"
    become: true
    become_user: "{{ system_default_user }}"
    notify: reload nginx

# Note: This wipes the database first. But provides fixtures that pharos:setup does not.
  - name: PHAROS | Populate DB with fixtures
    shell: chdir="{{pharos_app_root}}" rake pharos:populate_db
    become: true
    become_user: "{{ system_default_user }}"
    when: RAILS_ENV == 'development'
    tags: populatedb

  - name: Update permissions on logfile
    file:
        path: "{{pharos_app_root}}/log/"
        owner: "{{system_default_user}}"
        group: "{{deploy_group}}"
        mode: 0755
        recurse: yes
    tags: logperm

  - name: Setup log rotation
    template:
        src: logrotation.yml.j2
        dest: "/etc/logrotate.d/pharos_{{RAILS_ENV}}"
        owner: "root"
        group: "{{deploy_group}}"
        mode: 0644
    tags: pharos_logrotate

  - name: Setup Pharos Cron Jobs
    cron: name="{{item.key}}"
          user="{{system_default_user}}"
          minute="{{item.value.minute | default('*')}}"
          hour="{{item.value.hour | default('*')}}"
          day="{{item.value.day | default('*')}}"
          month="{{item.value.month | default('*')}}"
          job=". $HOME/.profile; {{pharos_app_root}}/bin/pharos_notify.py
                 {{item.value.params | default('')}}
                 >> {{pharos_app_root}}/log/cron_{{item.key}}.log 2>&1"
          state=present
          disabled="{{item.value.disabled}}"
    with_dict: "{{pharos_cronjobs}}"
    tags: pharos_cron

