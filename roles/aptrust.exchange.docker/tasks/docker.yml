# NOTE: Former home of repo was /home/ubuntu/go/src/github.com/APTrust/exchange, new home is
# /srv/docker/exchange
#
- name: Ensure dockerd is installed and running
  command: docker --version
  tags: checkdock

- name: Setup dockerapp directory structure
  file:
    path: "{{item}}"
    owner: "{{system_default_user}}"
    group: "{{system_default_user}}"
    mode: 0755
    state: directory
  with_items:
      - "{{docker_app_path}}"
      - "{{docker_data_path}}"
  tags: makdir

- name: Clone exchange repo
  git: repo="git@github.com:APTrust/exchange.git"
      dest="{{ docker_app_path }}"
      accept_hostkey=yes
      clone=yes
      update=yes
      force=yes
      version="{{ ex_git_version | default(master)}}"
  become_user: "{{system_default_user}}"
  become: true
  register: gitclone
  tags: buildgo, gitclone

# Note: Environment env vars (user profile) supersede .env
# https://docs.docker.com/compose/environment-variables/#the-env-file
- name: Update env vars in .env
  lineinfile:
    dest: "{{docker_app_path }}/.env"
    regexp: "^{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - { regexp: 'nsq_mem_queue_size=', line: 'nsq_mem_queue_size={{ex_nsq_mem_queue_size}}' }
    - { regexp: 'nsq_data_path=', line: 'nsq_data_path={{ex_nsq_data_path}}' }
    - { regexp: 'nsq_broadcast_address=', line: 'nsq_broadcast_address={{ex_nsq_broadcast_address}}' }
    - { regexp: 'nsq_msg_timeout=', line: 'nsq_msg_timeout={{ex_nsq_msg_timeout}}' }
    - { regexp: 'nsq_max_msg_timeout=', line: 'nsq_max_msg_timeout={{ex_nsq_max_msg_timeout}}' }
#    - { regexp: 'nsq_max_msg_size=', line: 'nsq_max_msg_size={{ex_nsq_max_msg_size}}' }
    - { regexp: 'nsq_tcp_address=', line: 'nsq_tcp_address={{ex_nsq_tcp_address}}' }
    - { regexp: "AWS_ACCESS_KEY", line: "AWS_ACCESS_KEY={{aws_go_user}}"}
    - { regexp: "AWS_SECRET_ACCESS_KEY", line: "AWS_SECRET_ACCESS_KEY={{aws_go_pwd}}"}
    - { regexp: "PHAROS_API_USER", line: "PHAROS_API_USER={{pharos_api_user}}"}
    - { regexp: "PHAROS_API_KEY", line: "PHAROS_API_KEY={{pharos_api_key}}"}
   tags: dotenv

# Note: Commmon role creates and mounts external filesystems like EFS/EBS.
#       Applying permissions recursively to avoid Supervisor bug that creates
#       logfiles only with root:root rw access.
#       https://github.com/Supervisor/supervisor/issues/114
# Note: Normally this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, sometimes systems are configured or just broken in ways that prevent this. One example are docker mounted files, they cannot be updated atomically and can only be done in an unsafe manner.
# This boolean option allows ansible to fall back to unsafe methods of updating files for those cases in which you do not have any other choice. Be aware that this is subject to race conditions and can lead to data corruption.
#
- name: "Create {{mount_dir}} volume directories (dockerapp)"
  become: yes
  file:
    path: "{{mount_dir}}/{{item.0}}/{{item.1}}"
    owner: "{{system_default_user}}"
    group: "{{deploy_group}}"
    mode: 0775
    recurse: true
    state: directory
    unsafe_writes: true
    follow: false
  with_nested:
    - ['exchange']
    - ['data', 'logs', 'restore', 'replication']
  tags: exchange_ebs

##### TEMP HYBRID SETUP START ####
##### THIS IS ONLY TEMPORARY TO RUN baremetal exchange and docker NSQ #######
- name: Update Exchange config file in {{goapp_cfg_path}}
  become_user: "{{system_default_user}}"
  become: true
  template: src=exchange.json.j2
            dest="/{{goapp_cfg_path}}/{{GO_ENV}}.json"
  tags:
    - buildgo
    - gitclone
    - exchangetemplate

#### TEMP HYBRID SETUP END ####

# Note: This will be used going forward in containerized apps.
# mounted as volume into each container.
- name: Update Exchange config file
  become_user: "{{system_default_user}}"
  become: true
  template: src=exchange.json.j2
            dest="{{docker_app_path}}/config/{{GO_ENV}}.json"
  tags: buildgo, exchangetemplate

- name: Add APTrust cronjobs
  cron:
    name: "{{item.key}}"
    user: "{{system_default_user}}"
    minute: "{{item.value.minute | default('*')}}"
    hour: "{{item.value.hour | default('*')}}"
    day: "{{item.value.day | default('*')}}"
    month: "{{item.value.month | default('*')}}"
    job: "sudo docker run --rm --env-file {{docker_app_path}}/.env \
          {{docker_registry_key}}exchange_{{item.key}}:{{docker_tag_name | default('latest')}} \
          {{item.value.params | default('')}} >> {{docker_data_path}}/log/cron_{{item.key}}.log 2>&1"
    state: present
    disabled: "{{item.value.disabled | default('no')}}"
  with_dict: "{{ apt_cronjobs }}"
  tags: cronjobs


# Ensure docker container running state.
- name: Start docker containers from compose
  docker_service:
    project_name: exchange
    project_src: "{{dockerapp_repo_path}}/"
  tags: dockserv
