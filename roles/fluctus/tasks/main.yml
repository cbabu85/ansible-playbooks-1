---
# Install libraries required for building various gems
# that fluctus uses.
  - name: install required packages
    sudo: yes
    apt: pkg={{item}} state=present update_cache=yes
    with_items:
        - sqlite3
        - libssl-dev
        - bundler
        - postgresql-client
        - libpq5
        - libpqxx-dev
        - libsqlite3-dev
        - nodejs
        - zip
        - mailutils
    environment:
       DEBIAN_FRONTEND: noninteractive
    tags:
        - packages
        - rails dependencies

  - name: Checkout fluctus repo
    become: yes
    become_user: "{{ system_default_user }}"
    git:
      repo=git@github.com:APTrust/fluctus.git
      dest=/var/www/{{ ansible_fqdn }}/fluctus
      force="{{force_update}}"
      accept_hostkey=yes
    register: git_checkout
    tags: [fluctus, gitcheckout]

  - name: Change group ownership of fluctus to www-data
    file: path="{{ fluctus_app_root }}" state=directory recurse=yes group=www-data

# Set the right ruby interpreter
  - name: set ruby interpreter's ruby_version
    shell: rbenv local "{{ruby_version}}"
    args:
      chdir: "/var/www/{{ ansible_fqdn }}/fluctus"
      creates: "{{fluctus_app_root}}/.ruby-version"
    become: yes
    become_user: "{{ system_default_user }}"
    tags: rbenv

# Install bundler in local rbenv
# TODO: Rewrite this to use ansible gem module to avoid reinstalling bundler
# on every play.
  - name: install bundler
    shell: chdir=/var/www/{{ ansible_fqdn }}/fluctus gem install bundler
    become: yes
    become_user: "{{ system_default_user }}"
    tags: rails

# Load gems into the local rbenv
# TODO: Rewrite this to use ansible bundler module to avoid reinstalling gems
# on every play. Requires Ansible 2.0.0
  - name: install items in fluctus gemfile
    become: yes
    become_user: "{{ system_default_user }}"
    shell: chdir=/var/www/{{ ansible_fqdn }}/fluctus bundle install
    tags: rails

## SOLR Component
# TODO: Move this in separate task file and include it here.
# Note: It is expected that Tomcat7 and Solr are already installed
  - name: Symlink Solr schema to fluctus schema
    file:
      src: "{{fluctus_solrschema}}"
      dest: "{{solr_home}}/{{item}}-core/conf/schema.xml"
      owner: tomcat7
      group: "{{solr_user}}"
      state: link
      force: yes
    with_items: solr_cores
    when: fluctus_solrconfig and fluctus_solrschema
    tags: symlink

  - name: Symlink solr_conf directory
    file:
      src: "{{fluctus_app_root}}/solr_conf/conf"
      dest: "{{solr_home}}/conf"
      owner: tomcat7
      group: "{{solr_user}}"
      state: link
      force: yes
    when: fluctus_solrconfig and fluctus_solrschema
    tags: solrconfsymlink

# Note: This creates a dependency and breaks reusability of the solr role.
# Note: force:yes will always result in a change. It is used to remove existing
# file and replace it with a symlink
  - name: Symlink Solr solrconfig to fluctus solrconfig
    file:
      src: "{{fluctus_solrconfig}}"
      dest: "{{solr_home}}/{{item}}-core/conf/solrconfig.xml"
      owner: tomcat7
      group: "{{solr_user}}"
      state: link
      force: yes
    with_items: solr_cores
    when: fluctus_solrconfig
    register: symlinked_solr
  # TODO: revisit this as it breaks once either var is not defined.
  #  when: (fluctus_solrconfig is defined) and (fluctus_solrschema is defined)
    tags: [fluctus, symlink]


# Replacing solr.yml in fluctus repo to use Tomcat
# TODO: rethink placing this here as it implies a dependency of an installed tomcat.
  - name: Replacing solr.yml in fluctus
    template:
        src: "solr.yml.j2"
        dest: "{{ fluctus_app_root }}/config/solr.yml"
        owner: "{{system_default_user}}"
        group: "{{system_deploy_group}}"
        mode: 0644
    tags: fluctus

# TODO: change relative paths of default solrconfig.xml once all
# servers re-deployed using Ansible.
# Note: This is a duplicate of a fix lib task above but is necessary
# to ensure portability of solr role if used without fluctus.
# dest: "{{ solr_home }}/{{item}}-core/conf/solrconfig.xml"
  - name: Temp workaround to fix lib paths of fluctus solrconfig.xml
    replace:
      dest: "{{ fluctus_app_root }}/solr_conf/conf/solrconfig-4.7.xml"
      regexp: '(<lib dir=")(/mnt/aptrust/solr/solr-4.7.2/)(.*)'
      replace: '\1{{solr_home}}/\3'
    when: "{{symlinked_solr.changed}} == true"
    register: tmp_workaround
    tags: [fluctus, symlink]

  - name: restart tomcat manually.
    service: name=tomcat7 state=restarted
    when: tmp_workaround|changed

# Following are two settings that allow the Go services to
# connect to Fluctus. You will have to set the API key manually
# after the system is running.
  - name: Set fluctus API user in .profile
    become: yes
    become_user: "{{system_default_user}}"
    lineinfile:
      dest={% if ansible_distribution == "MacOSX" %}/home/{{system_default_user}}/.bash_profile{% else %}/home/{{system_default_user}}/.profile{% endif %}
      state=present
      line="{{item}}"
    with_items:
      - "export FLUCTUS_API_USER='{{fluctus_api_user}}'"
      - "export FLUCTUS_API_KEY='GENERATE API KEY THROUGH WEB UI AND UPDATE ME HERE.'"

# Generate Rails keys if they don't already exist
# We don't do the usual lineinfile because we don't
# want to keep overwriting the keys.

# TODO: Make this a handler and use notify.
  - name: check for existence of rails and devise key
    shell: grep "{{item}}" /home/{{system_default_user}}/.profile
    register: key_present
    with_items:
      - "export RAILS_SECRET_KEY="
      - "export DEVISE_SECRET_KEY="
    ignore_errors: yes
    changed_when: False
    tags: railskey

  - name: generate secret keys
    shell: chdir=/var/www/{{ ansible_fqdn }}/fluctus bundle exec rake secret
    register: result
    when: key_present|failed
    ignore_errors: yes
    with_items:
      - RAILS_SECRET_KEY
      - DEVISE_SECRET_KEY
    tags: railskey

  - name: grep the existing key to set as fact
    when: key_present|success
    shell: grep {{item}}  /home/{{system_default_user}}/.profile | tr -d "export {{item}}=''"
    register: existing_key
    changed_when: False
    no_log: true
    with_items:
      - RAILS_SECRET_KEY
      - DEVISE_SECRET_KEY
    ignore_errors: yes
    tags: railskey

  # Workaround as set_fact does not allow looping over arrays
  - name: set RAILS key as fact if already generated
    when: key_present|success
    set_fact: RAILS_SECRET_KEY="{{existing_key.results[0].stdout}}"
    tags: railskey

  # Workaround as set_fact does not allow looping over arrays
  - name: set DEVISE key as fact if already generated
    when: key_present|success
    set_fact: DEVISE_SECRET_KEY="{{existing_key.results[1].stdout}}"
    tags: railskey

  - name: set key as fact
    when: key_present|failed
    set_fact: "RAILS_SECRET_KEY={{result.results[0].stdout}}"
    tags: railskey

  - name: set devise key as fact
    when: key_present|failed
    set_fact: "DEVISE_SECRET_KEY={{result.results[1].stdout}}"
    tags: railskey

  - name: add rails key to bash_profile
    when: key_present|failed
    lineinfile:
      dest=/home/{{system_default_user}}/.profile
      state=present
      line="export RAILS_SECRET_KEY=\'{{RAILS_SECRET_KEY}}\'"
    tags: railskey

  - name: add devise key to bash_profile
    when: key_present|failed
    lineinfile:
      dest=/home/{{system_default_user}}/.profile
      state=present
      line="export DEVISE_SECRET_KEY=\'{{DEVISE_SECRET_KEY}}\'"
    tags: railskey

# Set up Fluctus config
  - name: Setting fluctus app configuration
    template:
        src: "application.yml.j2"
        dest: "{{ fluctus_app_root }}/config/application.yml"
        owner: "{{system_default_user}}"
        group: "{{system_deploy_group}}"
        mode: 0644

# Set up Jetty/Solr
  - stat: path=/var/www/{{ ansible_fqdn }}/fluctus/jetty/lib
    register: jetty
    tags: rails

# Note: This can be removed if Tomcat is used for local dev and prod.
  - name: set up jetty/solr
    shell: chdir={{ fluctus_app_root }} executable=/bin/sh rails g hydra:jetty
    become_user: "{{system_default_user}}"
    when: jetty.stat.exists == True
    tags: rails

# TODO: Might not need this as figaro loads the env for fluctus.
  - lineinfile:
      dest=/home/{{system_default_user}}/.profile
      state=present
      line="export FEDORA_USER={{fedora_user}}"
    tags: rails

  - lineinfile:
      dest=/home/{{system_default_user}}/.profile
      state=present
      line="export FEDORA_PASS={{fedora_user}}"
    tags: rails

  - lineinfile:
      dest=/home/{{system_default_user}}/.profile
      state=present
      line="export FEDORA_URL=http://127.0.0.1:{{tomcat_catalina_port}}/fedora"
    tags: rails

  - name: copy passenger_wrapper in its place
    become: yes
    template:
      src: "fluctus_passenger_wrapper.sh.j2"
      dest: "/usr/local/bin/fluctus_passenger_wrapper.sh"
      owner: "{{system_default_user}}"
      group: "{{system_default_user}}"
      mode: 0774
    tags: wrapper

  - name: Check if fluctus log exists.
    stat: path="{{ fluctus_app_root}}/log/{{RAILS_ENV}}.log"
    register: fluctus_log

  - name: Create fluctus log
    become: yes
    become: "{{ system_default_user }}"
    file:
      path: "{{ fluctus_app_root}}/log/{{RAILS_ENV}}.log"
      owner: "{{system_default_user}}"
      state: touch
      mode: 0666
    when: not fluctus_log.stat.exists

  - name: Setup default admin user
    become: "{{ system_default_user }}"
    become: yes
    shell: chdir="{{fluctus_app_root}}" bundle exec rake fluctus:setup
    args:
      chdir: "{{fluctus_app_root}}"
      FLUCTUS_DB_USER: "{{fluctus_db_user}}"
      FLUCTUS_DB_HOST: "{{fluctus_db_host}}"
      FLUCTUS_DB_PWD: "{{fluctus_db_pwd}}"
      FEDORA_USER: "{{fedora_user}}"
      FEDORA_PASS: "{{fedora_pwd}}"
      FEDORA_URL: "http://localhost:8080/fedora"
    register: adminuser_result
    changed_when: adminuser_result.rc != 0
    tags: fluctus-setup

# Note: This assumes that a database has already been created. For the moment
# we will keep this a manual process and pre-requisite.
  - name: Run sqlite database migration
    become: yes
    become: "{{ system_default_user }}"
    shell: chdir="{{fluctus_app_root}}" bundle exec rake db:migrate
    when: RAILS_ENV == "development"
    tags: [rails, dbmigrate, populatedb]

  - name: Run postgres database migration
    shell: bundle exec rake db:migrate
    args:
      chdir: "{{fluctus_app_root}}"
      FLUCTUS_DB_USER: "{{fluctus_db_user}}"
      FLUCTUS_DB_HOST: "{{fluctus_db_host}}"
      FLUCTUS_DB_PWD: "{{fluctus_db_pwd}}"
    when: RAILS_ENV != "development"
    tags: [rails, dbmigratei, populatedb]

  - name: Populate_db with demo data.
    shell: bundle exec rake fluctus:populate_db --trace
    args:
      chdir: "{{fluctus_app_root}}"
      FLUCTUS_DB_USER: "{{fluctus_db_user}}"
      FLUCTUS_DB_HOST: "{{fluctus_db_host| quote}}"
      FLUCTUS_DB_PWD: "{{fluctus_db_pwd}}"
      FEDORA_USER: "{{fedora_user}}"
      FEDORA_PASS: "{{fedora_pwd}}"
      FEDORA_URL: "http://localhost:8080/fedora"
      SOLR_URL: "http://localhost:8080/solr"
      when: RAILS_ENV == "demo"
    tags: populatedb
