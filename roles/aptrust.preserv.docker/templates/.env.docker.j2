#
# APTrust Preservation Services config file
#
PRESERV_RELEASE="{{preserv_release}}"
#ENVIRONMENT="{{APT_ENV}}"
# APT_ENV not required for Docker setups since we use .env as default and populate .env to bind-mount over the default in the container.
#APT_ENV="{{APT_ENV}}"
DOCKER_TAG_NAME="{{preserv_release}}-{{preserv_branch}}"
DOCKER_DOMAIN="{{virtual_host}}"

DOCKER_DATA_PATH="{{preserv_data_path|d('./docker')}}"
BASE_WORKING_DIR="${DOCKER_DATA_PATH}"
# Profile directory exist in each service container. No local bind-mount necessary
PROFILES_DIR=./profiles
# Data path for external elastic storage.
RESTORE_DIR="{{goapp_preserv_data_path | d('./docker/data')}}/restore"

BUCKET_STANDARD_OR="preservation-or"
BUCKET_STANDARD_VA="preservation-va"
BUCKET_GLACIER_OH="glacier-oh"
BUCKET_GLACIER_OR="glacier-or"
BUCKET_GLACIER_VA="glacier-va"
BUCKET_GLACIER_DEEP_OH="glacier-deep-oh"
BUCKET_GLACIER_DEEP_OR="glacier-deep-or"
BUCKET_GLACIER_DEEP_VA="glacier-deep-va"
BUCKET_WASABI_OR="wasabi-or"
BUCKET_WASABI_VA="wasabi-va"

INGEST_TEMP_DIR="${BASE_WORKING_DIR}/tmp"
LOG_DIR="${DOCKER_DATA_PATH}/logs"

LOG_LEVEL="{{preserv_log_level}}"
MAX_DAYS_SINCE_LAST_FIXITY=90

MAX_FILE_SIZE=5497558138880
MAX_WORKER_ATTEMPTS=3

# NSQ Settings
NSQ_LOOKUPD_TCP_ADDRESS="nsqlookupd:4160"
NSQ_LOOKUPD_HTTP_ADDRESS="nsqlookupd:4161"
NSQ_DATA_PATH="${DOCKER_DATA_PATH}/nsq"
NSQ_BROADCAST_ADDRESS="nsqd"
NSQ_MSG_TIMEOUT="360m0s"
NSQ_MAX_MSG_TIMEOUT="180m0s"
NSQ_MAX_MSG_SIZE="31457280"
NSQ_MEM_QUEUE_SIZE="0"
NSQ_TCP_ADDRESS=0.0.0.0:4150
NSQ_MAX_REQ_TIMEOUT="180m0s"
NSQ_MAX_HEARTBEAT_INTERVAL="30s"

NSQ_LOOKUPD="${NSQ_LOOKUPD_HTTP_ADDRESS}"
NSQ_URL="http://${NSQ_BROADCAST_ADDRESS}:4151"

# PHAROS_API_KEY is the API key or token used to make Pharos API calls.
# For test, this key is hard-coded into the Pharos fixtures at
# test/fixtures/user.yml. The Docker container created by
# `make integration` automatically loads these fixtures on startup.
# For deployment, this will be loaded depending on deployed environment.
PHAROS_API_KEY="{{pharos_api_key}}"

# PHAROS_API_USER is the email address of the user making Pharos API calls.
# For test, this user is hard-coded into the Pharos test fixtures,
# like the API key above.
PHAROS_API_USER="{{pharos_api_user}}"
PHAROS_API_VERSION="v2"
PHAROS_URL="{{pharos_url}}"


# REDIS
REDIS_DEFAULT_DB= 0
REDIS_PASSWORD=""
REDIS_RETRIES=3
REDIS_RETRY_MS=250ms
REDIS_URL="redis:6379"
REDIS_USER= ""


STAGING_BUCKET="staging"
STAGING_UPLOAD_RETRIES=3
STAGING_UPLOAD_RETRY_MS=250ms
VOLUME_SERVICE_URL="http://volume_service:8898"

# Connection info for local S3 service. This is a minio server that
# runs in dev/test, but not demo/production.
# For localhost testing, use 'localhost' instead of '127.0.0.1' because
# Minio signed URLs use hostname, not IP.
S3_LOCAL_HOST="minio:9000"
S3_LOCAL_KEY="minioadmin"
S3_LOCAL_SECRET="minioadmin"

# AWS S3 connection info. In dev/test, point back to the local S3
# provider, so we can't overwrite anything in demo/prod.
# For localhost testing, use 'localhost' instead of '127.0.0.1' because
# Minio signed URLs use hostname, not IP.
S3_AWS_HOST="s3.amazonaws.com"
S3_AWS_KEY="{{aws_go_user}}"
S3_AWS_SECRET="{{aws_go_pwd}}"

# Wasabi S3 connection info.In dev/test, point back to the local S3
# provider, so we can't overwrite anything in demo/prod.
# For localhost testing, use 'localhost' instead of '127.0.0.1' because
# Minio signed URLs use hostname, not IP.
S3_WASABI_HOST="minio:9000"
S3_WASABI_KEY="minioadmin"
S3_WASABI_SECRET="minioadmin"
