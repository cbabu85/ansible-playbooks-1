---

- name: Ensure dockerd is installed and running
  command: docker --version
  tags: checkdocker

- name: Setup dockerapp directory structure
  file:
    path: "{{item}}"
    owner: "{{system_default_user}}"
    group: "{{system_default_user}}"
    mode: 0755
    state: directory
  with_items:
      - "{{docker_app_path}}"
      - "{{docker_data_path}}"
      - "{{docker_data_path}}/logs"
      - "{{docker_data_path}}/redis"
      - "{{docker_data_path}}/nsq"
      - "{{goapp_preserv_data_path}}"
  tags: makedirs, always

- name: Set commit-version fact to git hash
  set_fact: gitversion="{{git_version}}"
  when: git_version is defined
  tags: gitclone, gitversion

- name: Set commit-version fact to branch
  set_fact: gitversion="{{git_branch}}"
  when: git_version is undefined
  tags: gitclone, gitversion

- stat: path={{docker_app_path}}/.git
  register: gitrepo
  tags: gitclone, gitversion

- debug: var=gitversion
  tags: gitclone, gitversion

    # https://github.com/ansible/ansible/issues/19809
- name: Reset repo for Ansible bug
  command: git reset --hard
  args:
      chdir: "{{docker_app_path}}"
  when: gitrepo.stat.isdir is defined
  tags: gitclone

   #    Git version/branch logic:
   #    when git branch defined, use branch head
   #    when git branch is undefined, error
   #    when git branch and git version is defined, git clone, git checkout
   #    when git version defined but git branch undefined, error

# Note: We only clone the repository for .env and config/env.json and
# docker-compose.yml
- name: Clone preservation-services repo
  git:
    repo: "git@github.com:APTrust/preservation-services.git"
    dest: "{{ docker_app_path }}"
    accept_hostkey: yes
    clone: yes
    update: yes
    force: yes
    version: "{{ gitversion | default(master)}}"
  become_user: "{{system_default_user}}"
  become: true
  register: gitclone
  tags: buildgo, gitclone

  # NOTE: Revision should be set by play.
  # If git_version is set this will result in the same, if it's unset it
  # uses the HEAD/latest of the git repo.
- name: get revision
  shell: /bin/bash -c "cd {{docker_app_path}} && git rev-parse --short=7 HEAD"
  register: revision
  tags: revs, update_env, gitclone, always

- set_fact: preserv_release="{{revision.stdout}}"
  tags: revs, update_env, always

# Note: Replacing / for _ for docker_tag_name construct that's used in env
# to get the correct image
- set_fact: exchange_branch="{{git_branch | replace('/','_')}}"
  tags: revs, update_env, always


# Note: Environment env vars (user profile) supersede .env
# https://docs.docker.com/compose/environment-variables/#the-env-file
- name: Update env vars in .env
  template:
    src: .env.docker.j2
    dest: "{{docker_app_path}}/.env.docker"
    owner: "{{system_default_user}}"
    group: "{{system_default_group}}"
    mode: 0644
  tags: dotenv

- name: "Create elastic EBS volume directories (dockerapp)"
  become: yes
  file:
    path: "{{mount_dir}}/{{item.0}}/{{item.1}}"
    owner: "{{system_default_user}}"
    group: "{{deploy_group}}"
    mode: 0775
    recurse: true
    state: directory
    unsafe_writes: true
    follow: false
  with_nested:
    - ['preserv']
    - ['restore']
  tags: exchange_ebs

- name: Pull all exchange containers used in  cronjobs
  docker_image:
    name: "aptrust/{{item.key}}:{{preserv_release}}-{{preserv_branch}}"
    pull: true
  with_dict: "{{ preserv_cronjobs }}"
  tags: dockerimagepull

# NOTE: Referencing the go/bin/main with params is sub-optimal since container
# params may change but is necessary to pass possible item.value.params in.
# Will adress this again in the future.
# NOTE2: Volume mount of stats file is not ideal since it'll do it for every
# cron job.
- name: Add APTrust cronjobs
  cron:
    name: "{{ item.key }}"
    user: "{{system_default_user}}"
    minute: "{{item.value.minute | default('*')}}"
    hour: "{{item.value.hour | default('*')}}"
    day: "{{item.value.day | default('*')}}"
    month: "{{item.value.month | default('*')}}"
    job: "sudo run-one docker run --rm --env-file {{docker_app_path}}/.env.docker \
    -v {{docker_data_path}}/logs/:/app/logs \
     {{docker_registry_key}}{{item.key}}:{{preserv_release}}-{{preserv_branch}} \
     {{item.value.params | default('')}} >> {{goapp_log_path}}/cron_{{item.key}}.log 2>&1"
    state: present
    disabled: "{{item.value.disabled | default('no')}}"
  with_dict: "{{ apt_cronjobs }}"
  tags: cronjobs

  #  -v /data/exchange/config/config.json:/go/bin/config/config.json

# Ensure docker container running state.
- name: Start docker containers from compose
  docker_service:
    project_src: "{{docker_app_path}}/"
    files: docker-compose.yml
    pull: true
  vars:
      ansible_python_interpreter: "/usr/bin/env python-docker"
  tags: dockserv
