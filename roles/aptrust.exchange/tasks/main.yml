---

# Check if GO is installed, if not fail. Alternatively include go role in meta.
# TODO: Distinguish between ingest and restore services and add a condition
#       that only starts respective services

# Install required packages
- name: Install required packages
  become: yes
  apt: pkg="{{item}}" state=present update_cache=yes
  with_items:
      - python-pip
      - libmagic-dev
      - git
      - bzr
      - mercurial
      - curl
  environment:
     DEBIAN_FRONTEND: noninteractive

# Set AWS Credentials as ENV
# TODO: Consider using separate creds for staging and prod S3 access.
- name: Set AWS ACCESS Credentials
  no_log: true
  lineinfile: >
    dest="/home/{{system_default_user}}/.profile"
    state=present
    line="{{item}}"
    insertafter=EOF
  with_items:
    - "export AWS_ACCESS_KEY_ID={{aws_go_user}}"
    - "export AWS_SECRET_ACCESS_KEY={{aws_go_pwd}}"

# Note: Commmon role creates and mounts external filesystems like EFS/EBS.
#       If deploy is on virtualbox, directories will be created locally.
- name: Create EBS/EFS volume directories
  become: yes
  file:
    path: "{{item}}"
    owner: "{{system_default_user}}"
    group: "{{deploy_group}}"
    mode: 0755
    state: directory
  with_items:
    - /mnt/apt
    - /mnt/apt/data
    - /mnt/apt/logs
    - /mnt/apt/restore
    - /mnt/apt/replication
    - /mnt/dpn
    - /mnt/dpn/data
    - /mnt/dpn/logs
    - /mnt/dpn/restore
    - /mnt/dpn/replication

# Checkout Exchange repo
# This may be done using ansistrano. Alternatively we can just update the
# current version and restart supervisor services first. Is rollback necessary? Probably.
- name: Checkout exchange repo
  become_user: "{{system_default_user}}"
  shell: "go get -d github.com/APTrust/exchange/..."
  environment: "{{go_env}}"
  register: checkout
  tags: buildgo

# go install exchange binaries.
- name: Build and install go binaries
  shell: "go install $(glide novendor)"
  args:
    chdir: "{{goapp_src_path}}"
  environment: "{{go_env}}"
  when: checkout.changed
  register: build_result
  failed_when: "'no buildable Go source files' not in build_result.stderr"
  # Note: even if status is sucessful this will be a changed task.?
  changed_when: "'no buildable Go source files' not in build_result.stderr"
  tags: buildgo

# Note: apt_bucket_reader is not run by supervisor but cron
# Get list of compiled go binaries
- name: Get list of compiled go binaries
  shell: "ls $GOPATH/bin | grep -v apt_bucket_reader"
  register: dir_out
  tags: listfiles


- name: Create the Supervisor config file for Exchange Services
  template: src=supervisor.conf.j2
            dest=/etc/supervisor/conf.d/exchange.conf
  register: supervisor_config_files
  tags: listfiles


- name: Add Cronjob for apt_bucket_reader
  cron: name='apt_bucket_reader'
        user="{{system_default_user}}"
        minute='*/1'
        job=". $HOME/.profile; {{goapp_bin_path}}/apt_bucket_reader -config={{GO_ENV}} > {{goapp_log_path}}/cron_apt_bucket_reader.log 2>&1"
  tags: cronjobber

# When state = present, the module will call supervisorctl reread then supervisorctl add if the program/group does not exist
- name: Reread/Add supervisor app config files
  supervisorctl: name="{{item}}" state=present
  with_items: "{{dir_out.stdout_lines}}"
  register: supervisor_config_update
  when: supervisor_config_files.changed

# Golang nsq_service handles nsq. Disable nsq upstart services.
- name: Ensure nsq upstart services are stopped and disabled
  service: name="{{item}}" state=stopped enabled=no
  ignore_errors: true
  with_items:
#    - nsqd
    - nsqadmin
    - nsqlookupd

# When state = restarted, the module will call supervisorctl update then call supervisorctl restart.
- name: Update and restart supervisor processes
  supervisorctl: name="{{item}}" state=restarted
  when: supervisor_config_files.changed
  with_items: "{{dir_out.stdout_lines}}"

# Note: exchange is the program group used in supervisor config.
- name: Ensure Exchange services are running
  supervisorctl: name="exchange:{{item}}" state=started
  with_items: "{{dir_out.stdout_lines}}"

#- name: Re-read the Supervisor config files
#  command: supervisorctl reread
#  register: supervisor_config_update
#  when: supervisor_config_files.changed

# - name: Update Supervisor to add the app in the process group
#  become: true
#  command: supervisorctl update
#  when: supervisor_config_update.changed
