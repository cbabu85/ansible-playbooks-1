# Install required packages
- name: Install required packages
  become: yes
  apt: pkg="{{item}}" state=present update_cache=yes
  with_items:
      - python-pip
      - libmagic-dev
      - git
      - bzr
      - mercurial
      - curl
  environment:
     DEBIAN_FRONTEND: noninteractive

# Set AWS Credentials as ENV
# TODO: Consider using separate creds for staging and prod S3 access.
- name: Set AWS Credentials, GoPath, ExchangeHome
  no_log: true
  lineinfile: >
    dest="/home/{{system_default_user}}/.profile"
    state=present
    regexp="{{item.name}}=.*"
    line="export {{item.name}}={{item.value}}"
  with_items:
    - { name: "AWS_ACCESS_KEY_ID", value: "{{aws_go_user}}"}
    - { name: "AWS_SECRET_ACCESS_KEY", value: "{{aws_go_pwd}}"}
    - { name: "GOPATH", value: "{{go_env.GOPATH}}"}
    - { name: "EXCHANGE_HOME", value: "{{goapp_src_path}}"}
  tags: envvars

# Note: Commmon role creates and mounts external filesystems like EFS/EBS.
#       When deploy is on virtualbox, directories will be created locally.
- name: Create EFS volume directories
  become: yes
  file:
    path: "/mnt/efs/{{item.0}}/{{item.1}}"
    owner: "{{system_default_user}}"
    group: "{{deploy_group}}"
    mode: 0775
    state: directory
  with_nested:
    - ['apt', 'dpn']
    - ['data','logs','restore','replication']

# TODO: Refactor this as it will clone the repo on every run and overwrite the
#      config files everytime. Consider moving config files in ~/go/bin/config
# Checking if repo has been updated. Does not clone since 'go get' below will
- name: clone exchange repository
  git: repo="git@github.com:APTrust/exchange.git"
       dest="{{ goapp_src_path }}"
       accept_hostkey=yes
       clone=yes
       update=no
       version=master
  become_user: "{{system_default_user}}"
  register: gitclone
  tags: gitclone

# Checkout Exchange repo
- name: Checkout exchange repo
  become_user: "{{system_default_user}}"
  shell: "go get -u -f -d github.com/APTrust/exchange/..."
  environment: "{{go_env}}"
  register: checkout
  when: gitclone.changed
  tags: buildgo, gitclone

# go install exchange binaries.
- name: Build and install go binaries
  shell: "go install $(glide novendor)"
  args:
    chdir: "{{goapp_src_path}}"
  environment: "{{go_env}}"
  when: checkout.changed
  register: go_build_result
  failed_when: "'no buildable Go source files' not in go_build_result.stderr"
  # Note: even if status is sucessful this will be a changed task.?
  changed_when: "'no buildable Go source files' not in go_build_result.stderr"
  tags: buildgo

# Identify type of server, DPN or APTrust
- name: Is this an APT or DPN Server
  set_fact: orgtype="{% if 'dpn' in ansible_hostname%}dpn{%else%}apt{%endif%}"
  tags: orgtype, lsfiles

- shell: "cd {{goapp_bin_path}} && ls -1 {{orgtype}}* | egrep -v 'apt_bucket_reader|{{orgtype}}_queue'"
  register: dir_out
  tags: lsfiles

- name: Set Exchange services fact to configure
  set_fact:
      exchangeservices: "{{dir_out.stdout_lines}}"
  tags: lsfiles

- name: Set nsq services fact to configure supervisor
  set_fact:
      nsqservices: ['nsqadmin','nsqlookupd','nsqd']
  tags: lsfiles

# TODO: Re-enable once config jinja template is finished.
# - name: Update Exchange config file
#  template: src=exchange.json.j2
#            dest="/{{goapp_cfg_path}}/{{GO_ENV}}.json"
#  tags: exchangetemplate

# TODO: Re-enable once config jinja template is finished.
# TODO: Check NSQ installation if it uses a different config.
# - name: Update NSQ config file
#  template: src=nsq.config.j2
#            dest="{{goapp_cfg_path}}/nsq/{{GO_ENV}}.config"

- name: Set Supervisor config for Exchange and NSQ Services
  template: src="{{item.name}}"
            dest="/etc/supervisor/conf.d/{{item.dest}}"
  register: supervisor_config_files
  with_items:
    - { name: 'exchange_supervisor.conf.j2', dest: 'exchange.conf'}
    - { name: 'nsq_supervisor.conf.j2', dest: 'nsq.conf'}
  tags: listfiles

# TODO: Enable again once all services are running
- name: Add Cronjob for {{item}}"
  cron: name="{{item}}"
        user="{{system_default_user}}"
        minute='*/1'
        hour='*/2'
        job=". $HOME/.profile; {{goapp_bin_path}}/{{item}} -config={{goapp_cfg_path}}/{{GO_ENV}}.json > {{goapp_log_path}}/cron_{{item}}.log 2>&1"
        state=absent
  with_items:
      - apt_bucket_reader
      - apt_queue
  tags: cronjobber

# When state = present, the module will call supervisorctl reread then supervisorctl add if the program/group does not exist
- name: Reread/Add supervisor app config files
  supervisorctl: name="{{item}}" state=present
#  with_items: "{{exchangeservices}}"
  with_items:
    - 'nsqservices:'
    - 'exchange:'
  register: supervisor_config_update
  when: supervisor_config_files.changed or go_build_result.changed

# Supervisor controls nsq, not upstart. Disable nsq upstart services.
- name: Ensure nsq upstart services are stopped and disabled
  service: name="{{item}}" state=stopped enabled=no
  ignore_errors: true
  with_items:
    - nsqd
    - nsqadmin
    - nsqlookupd

# When state = restarted, the module will call supervisorctl update then call supervisorctl restart.
- name: Update and restart supervisor processes
  supervisorctl: name="exchange:{{item}}" state=restarted
  when: supervisor_config_files.changed or go_build_result.changed
  with_items: "{{exchangeservices}}"

# Note: exchange is the program group used in supervisor config.
- name: Ensure Exchange services are running
  supervisorctl: name="exchange:{{item}}" state=started
  with_items: "{{exchangeservices}}"
