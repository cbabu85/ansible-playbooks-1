# These tasks are meant for an alternative Docker only install and
# may repeat some of the baremental.yml steps.
## TODO:  Need to reinable once refactored for DPN use.
  # - include: dpn.yml
  # when: orgtype == 'dpn'

# NOTE: Former home of repo was /home/ubuntu/go/src/github.com/APTrust/exchange, new home is
# /srv/docker/exchange/repo
# TODO: Define dockerhub (wherever that may be) in defaults. Default to hub.docker.com
# TODO: Need to create volume directories to mount config and data volumes
# TODO: Need to ensure to pass in ENV Vars to docker containers, like AWS, pharos api key,...
## - use .env file with option to overwrite with cli params.
# TODO: Run and start containers. Stop. Update config in volume mounts. Restart containers

# TODO: Refactor this as it will clone the repo on every run and overwrite the
#      config files everytime. Consider moving config files in ~/go/bin/config
# Checking if repo has been updated. Does not clone since 'go get' below will
# Note: This will go away once all services are containerized. It may only update config files and just pull the latest containers from dockerhub.
- name: Ensure dockerd is installed and running
  command: docker --version
  tags: checkdock

- name: Setup dockerapp directory structure
  file:
    path: "{{item}}"
    owner: "{{system_default_user}}"
    group: "{{system_default_user}}"
    mode: 0755
    state: directory
  with_items:
      - "{{dockerapp_path}}"
      - "{{dockerapp_repo_path}}"
      - "{{dockerapp_data_path}}"
  tags: makdir

- name: Clone exchange repo
  git: repo="git@github.com:APTrust/exchange.git"
      dest="{{ dockerapp_repo_path }}"
      accept_hostkey=yes
      clone=yes
      update=yes
      force=yes
      version="{{ ex_git_branch | default(master)}}"
  become_user: "{{system_default_user}}"
  become: true
  register: gitclone
  tags: buildgo, gitclone

# Note: Environment env vars (user profile) supersede .env
# https://docs.docker.com/compose/environment-variables/#the-env-file
- name: Update env vars in .env
  lineinfile:
    dest: "{{dockerapp_repo_path }}/.env"
    regexp: "^{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - { regexp: 'nsq_mem_queue_size=', line: 'nsq_mem_queue_size={{ex_nsq_mem_queue_size}}' }
    - { regexp: 'nsq_data_path=', line: 'nsq_data_path={{ex_nsq_data_path}}' }
    - { regexp: 'nsq_broadcast_address=', line: 'nsq_broadcast_address={{ex_nsq_broadcast_address}}' }
    - { regexp: 'nsq_msg_timeout=', line: 'nsq_msg_timeout={{ex_nsq_msg_timeout}}' }
    - { regexp: 'nsq_max_msg_timeout=', line: 'nsq_max_msg_timeout={{ex_nsq_max_msg_timeout}}' }
#    - { regexp: 'nsq_max_msg_size=', line: 'nsq_max_msg_size={{ex_nsq_max_msg_size}}' }
    - { regexp: 'nsq_tcp_address=', line: 'nsq_tcp_address={{ex_nsq_tcp_address}}' }
    - { regexp: 'nsq_max_req_timeout=', line: 'nsq_max_req_timeout={{ex_nsq_max_req_timeout}}' }
  tags: dotenv


# TODO: pass in ENV vars into container runs
# Set AWS Credentials as ENV
- name: Set AWS Credentials, GoPath, ExchangeHome
  no_log: true
  lineinfile: >
    dest="/home/{{system_default_user}}/.profile"
    state=present
    regexp="{{item.name}}=.*"
    line="export {{item.name}}={{item.value}}"
  with_items:
    - { name: "AWS_ACCESS_KEY_ID", value: "{{aws_go_user}}"}
    - { name: "AWS_SECRET_ACCESS_KEY", value: "{{aws_go_pwd}}"}
    - { name: "GOPATH", value: "{{go_env.GOPATH}}"}
    - { name: "EXCHANGE_HOME", value: "{{goapp_src_path}}"}
    - { name: "PHAROS_API_USER", value: "{{pharos_api_user}}"}
    - { name: "PHAROS_API_KEY", value: "{{pharos_api_key}}"}
  tags: envvars

# Note: Commmon role creates and mounts external filesystems like EFS/EBS.
#       Applying permissions recursively to avoid Supervisor bug that creates
#       logfiles only with root:root rw access.
#       https://github.com/Supervisor/supervisor/issues/114
# Note: Normally this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, sometimes systems are configured or just broken in ways that prevent this. One example are docker mounted files, they cannot be updated atomically and can only be done in an unsafe manner.
# This boolean option allows ansible to fall back to unsafe methods of updating files for those cases in which you do not have any other choice. Be aware that this is subject to race conditions and can lead to data corruption.
#
- name: "Create {{mount_dir}} volume directories (dockerapp)"
  become: yes
  file:
    path: "{{mount_dir}}/{{item.0}}/{{item.1}}"
    owner: "{{system_default_user}}"
    group: "{{deploy_group}}"
    mode: 0775
    recurse: yes
    state: directory
    unsafe_writes: yes
    follow: no
  with_nested:
    - ['apt']
    - ['data','logs','restore','replication']
  tags: exchange_ebs
  when: orgtype == 'apt'

##### TEMP HYBRID SETUP START ####
##### THIS IS ONLY TEMPORARY TO RUN baremetal exchange and docker NSQ #######
- name: clone exchange repository
  git: repo="git@github.com:APTrust/exchange.git"
      dest="{{ goapp_src_path }}"
      accept_hostkey=yes
      clone=yes
      update=yes
      force=yes
      version="{{ ex_git_branch | default(master)}}"
  become_user: "{{system_default_user}}"
  become: true
  register: gitclone
  tags: buildgo, gitclone

# Checkout Exchange repo
- name: Go get exchange repo
  become_user: "{{system_default_user}}"
  become: true
  shell: "go get -u -f -d github.com/APTrust/exchange/..."
  environment: "{{go_env}}"
  register: checkout
  when: gitclone is changed
  tags: buildgo, gitclone

# go install exchange binaries.
- name: Build and install go binaries
  shell: "go install $(glide novendor)"
  args:
    chdir: "{{goapp_src_path}}"
  environment: "{{go_env}}"
  become_user: "{{system_default_user}}"
  become: true
  when: checkout.changed or buildgo|bool == true
  register: go_build_result
  failed_when: "'no non-test Go files' not in go_build_result.stderr"
  #  Note: This failed_when only applies to older Go <1.10  versions.
  #  failed_when: "'no buildable Go source files' not in go_build_result.stderr"
  # Note: even if status is sucessful this will be a changed task.?
  changed_when: "'no buildable Go source files' not in go_build_result.stderr"
  tags: buildgo,goinstall
  #


- name: Update Exchange config file in {{goapp_cfg_path}}
  become_user: "{{system_default_user}}"
  become: true
  template: src=exchange.json.j2
            dest="/{{goapp_cfg_path}}/{{GO_ENV}}.json"
  tags: buildgo, exchangetemplate


- name: Set apt exchange services fact to configure supervisor
  set_fact:
      exchangeservices: "{{ex_apt_services}}"
  when: orgtype == 'apt'
  tags: lsfiles

- name: Set Supervisor config for Exchange and NSQ Services
  template: src="{{item.name}}"
            dest="/etc/supervisor/conf.d/{{item.dest}}"
  register: supervisor_config_files
  with_items:
    - { name: 'exchange_supervisor.conf.j2', dest: 'exchange.conf'}
  tags: listfiles

# When state = present, the module will call supervisorctl reread then
# supervisorctl add if the program/group does not exist
- name: Reread/Add supervisor app config files
  supervisorctl: name="exchange:" state=present
  register: supervisor_config_update
  when: supervisor_config_files.changed or go_build_result.changed or checkout.changed
  tags: reread_supervisor

# When state = restarted, the module will call supervisorctl update then
# call supervisorctl restart.
- name: Update and restart supervisor processes
  supervisorctl: name="exchange:" state=restarted
  when: restartapps is defined or supervisor_config_files.changed or go_build_result.changed or checkout.changed
  tags: restartapps

# Note: exchange is the program group used in supervisor config.
- name: Ensure Exchange services are running
  supervisorctl: name="exchange:" state=started




#### TEMP HYBRID SETUP END ####

# Note: This will be used going forward in containerized apps.
# mounted as volume into each container.
- name: Update Exchange config file
  become_user: "{{system_default_user}}"
  become: true
  template: src=exchange.json.j2
            dest="{{dockerapp_repo_path}}/config/{{GO_ENV}}.json"
  tags: buildgo, exchangetemplate

# TODO: Need to figure out if cronjobs should run in containers or bare-metal.
- name: Add APTrust cronjobs
  cron: name="{{item.key}}"
        user="{{system_default_user}}"
        minute="{{item.value.minute | default('*')}}"
        hour="{{item.value.hour | default('*')}}"
        job=". $HOME/.profile; {{goapp_bin_path}}/{{item.key}}
             -config={{goapp_cfg_path}}/{{GO_ENV}}.json
             {{item.value.params | default('')}}
             >> {{goapp_log_path}}/cron_{{item.key}}.log 2>&1"
        state=present
        disabled=yes
  with_dict: "{{ apt_cronjobs }}"
  when: orgtype == 'apt'
  tags: apt_cronjobs


# Ensure docker container running state.
- name: Start docker containers from compose
  docker_service:
    project_name: exchange
    project_src: "{{dockerapp_repo_path}}/"
  tags: dockserv


# TODO: Need add option for non-Graylog, local file storage and Graylog.
# NOTE: https://docs.docker.com/compose/compose-file/#logging
- name: Add logrotation because supervisor doesn't want to
  template:
      src: logrotation.yml.j2
      dest: "/etc/logrotate.d/exchange_{{APP_ENV}}"
      owner: "root"
      group: "{{deploy_group}}"
      mode: 0644
  tags: exchange_logrotate
