---
# This playbook executes
# - Create S3 Glacier buckets
# - Enables default encryption
# - Blocks S3 public access by default
# - Setup S3 Lifecycle policies for Deep Glacier
#
      # A bug in the iam_policy module is sending json as dict not as raw text,
      # therefore jinja string filter has to be applied outside of the task.
      # per official workaround:
      # https://github.com/ansible/ansible/issues/7005#issuecomment-42894813

    - name: set facts for cli commands
      set_fact:
        aptglacierenc: "{{ lookup( 'template', 's3_bucket_encryption.json.j2') | string }}"
        aptglacierdeep: "{{ lookup( 'template', 'apt_glacier_deep_lifecycle.json.j2') | string }}"
        s3_policy_data_prod: "{{ lookup( 'template', 's3_policy_prod.json.j2') | string }}"
        s3_policy_data_test: "{{ lookup( 'template', 's3_policy_test.json.j2') | string }}"
        s3_policy_data_staging: "{{ lookup( 'template', 's3_policy_staging.json.j2') | string }}"
        s3_bucket_access: "{{ lookup( 'template', 's3_bucket_access.json.j2') | string }}"
        s3_bucket_policy_prod: "{{ lookup( 'template', 's3_bucket_policy_prod.json.j2') | string }}"
        s3_bucket_policy_test: "{{ lookup( 'template', 's3_bucket_policy_test.json.j2') | string }}"
        s3_bucket_policy_staging: "{{ lookup( 'template', 's3_bucket_policy_staging.json.j2') | string }}"
      tags: always

# TODO: Shoudl set up services users apt.go.demo, apt.go.production, apt.go.staging

    - name: Create S3 Glacier buckets
      aws_s3:
        bucket: "{{ item.name }}"
        encrypt: true
        encryption_mode: AES256
        region: "{{item.region}}"
        mode: create
      with_items: "{{s3_glacier_buckets}}"
      tags: new_buckets, justbuckets

    - name: Setup S3 default encryption for Deep Glacier
      command: >
           aws s3api put-bucket-encryption
            --bucket "{{ item.name }}"
            --server-side-encryption-configuration '{{ aptglacierenc }}'
      with_items: "{{s3_glacier_buckets}}"
      tags: bucketencryption

    - name: Setup S3 default bucket access
      command: >
            aws s3api put-public-access-block
            --bucket "{{ item.name }}"
            --public-access-block-configuration '{{ s3_bucket_access }}'
      with_items: "{{s3_glacier_buckets}}"
      tags: bucketaccess

      #    - name: Setup S3 Logging per awscli (ugly but works)
      # shell: 'echo { \"LoggingEnabled\": { \"TargetBucket\": \"aptrust.s3.logs\", \"TargetPrefix\": \"{{item.name}}/\"} } > /tmp/logging.json && aws s3api put-bucket-logging --bucket {{item.name}} --bucket-logging-status file:///tmp/logging.json'
      # with_items: "{{s3_glacier_buckets}}"

    - name: Setup S3 Lifecycle policies for Deep Glacier
      command: >
           aws s3api put-bucket-lifecycle-configuration
            --bucket "{{ item.name }}"
            --lifecycle-configuration '{{ aptglacierdeep }}'
      with_items: "{{s3_glacier_buckets}}"
      tags: lcyclecli

    - name: Setup preservation-services group
      iam:
        iam_type: group
        name: "{{apt_preservation_group}}"
        state: present
      tags: iam_group

    - name: Setup apt-go-services users
      iam:
        iam_type: user
        name: "{{item}}"
        state: present
        groups: "{{apt_preservation_group}}"
      with_items:
        - "{{apt_preservation_users}}"
      tags: iam_users

    - debug:
        msg: "{{item.0.name}} {{ 's3_bucket_policy_%s' | format(item.1) }}"
      with_subelements:
          - "{{ s3_buckets }}"
          - environment
      tags: s3_bucket_policy_debug

    - name: Setup Bucket policies to only allow preservation services users access
      s3_bucket:
        name: "{{item.0.name}}"
        policy: "{{ s3_bucket_policy_staging }}"
        #        s3_bucket_policy_prod: "{{ lookup( 'template', 's3_bucket_policy_prod.json.j2') | string }}"
        #s3_bucket_policy_test: "{{ lookup( 'template', 's3_bucket_policy_test.json.j2') | string }}"
        #s3_bucket_policy_staging: "{{ lookup( 'template', 's3_bucket_policy_staging.json.j2') | string }}"
      with_subelements:
        - "{{ s3_buckets }}"
        - environment
      tags: s3_bucket_policy


      #    - name: Assign IAM policy to user groups
      #    iam_policy:
      #  iam_type: user
      #  iam_name: "{{ item.0 }}"
      #  policy_name: "{{inst_id}}-{{inst_id_suffix}}-{{item.2}}-s3policy"
      #  state: present
      #  policy_json: "{{item.1 }}"
      #with_together:
      #  - ['go-services-demo', 'go-services-prod', 'go-services-staging']
      #  - ['{{s3_policy_data_test}}', '{{s3_policy_data_prod}}', '{{s3_policy_data_staging}}']
      #  - ['test', 'prod']
      # tags: iampol

# TODO: Create credentials when creating users and print to stdout or put into encrypted var file for initial distribution

# Note: Disabled for now. Will create and distribute IAM creds manually for now.
#    - name: Create user credentials for testing
#      iam:
#        iam_type: user
#        name: "{{item.name}}"
#        state: present
#        access_key_state: create
#      register: credentials
#      with_items:
#        -  "{{ inst_users }}"
#      tags: iamcred
