---
    - name: Create S3 Glacier buckets
      aws_s3:
        bucket: "{{ item.name }}"
        encrypt: yes
        encryption_mode: AES256
        region: "{{item.region}}"
        mode: create
      with_items: "{{s3_glacier_buckets}}"
      tags: new_buckets, justbuckets

      #    - name: Setup S3 Logging per awscli (ugly but works)
      # shell: 'echo { \"LoggingEnabled\": { \"TargetBucket\": \"aptrust.s3.logs\", \"TargetPrefix\": \"{{item.name}}/\"} } > /tmp/logging.json && aws s3api put-bucket-logging --bucket {{item.name}} --bucket-logging-status file:///tmp/logging.json'
      # with_items: "{{s3_glacier_buckets}}"
    - name: set policydata
      set_fact:
        aptglacierdeep: "{{ lookup( 'template', 'apt_glacier_deep_lifecycle.json.j2') | string }}"

    - name: Setup S3 Lifecycle policies for Deep Glacier
      command: >
           aws s3api put-bucket-lifecycle-configuration
            --bucket "{{ item.name }}"
            --lifecycle-configuration '{{ aptglacierdeep }}'
      with_items: "{{s3_glacier_buckets}}"
      tags: lcyclecli

      # A bug in the iam_policy module is sending json as dict not as raw text,
      # therefore jinja string filter has to be applied outside of the task.
      # per official workaround:
      # https://github.com/ansible/ansible/issues/7005#issuecomment-42894813
    - name: set policydata
      set_fact:
         s3policydata: "{{ lookup( 'template', 's3_policy.json.j2') | string }}"
      tags: iampol

      # A bug in the iam_policy module is sending json as dict not as raw text,
      # therefore jinja string filter has to be applied outside of the task.
      # per official workaround:
      # https://github.com/ansible/ansible/issues/7005#issuecomment-42894813
    - name: set policydata_test
      set_fact:
         s3policydatatest: "{{ lookup( 'template', 's3_policy_test.json.j2') | string }}"
      tags: iampol

      #    - name: Assign IAM policy to user groups
      #    iam_policy:
      #  iam_type: user
      #  iam_name: "{{ item.0 }}"
      #  policy_name: "{{inst_id}}-{{inst_id_suffix}}-{{item.2}}-s3policy"
      #  state: present
      #  policy_json: "{{item.1 }}"
      #with_together:
      #  - ['go-services-demo', 'go-services-prod']
      #  - ['{{s3policydatatest}}', '{{s3policydata}}']
      #  - ['test', 'prod']
      # tags: iampol

# TODO: Create credentials when creating users and print to stdout or put into encrypted var file for initial distribution

# Note: Disabled for now. Will create and distribute IAM creds manually for now.
#    - name: Create user credentials for testing
#      iam:
#        iam_type: user
#        name: "{{item.name}}"
#        state: present
#        access_key_state: create
#      register: credentials
#      with_items:
#        -  "{{ inst_users }}"
#      tags: iamcred
