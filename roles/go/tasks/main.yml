---
#
# Go server config. This is common to local dev VMs, test and live servers.
#

#
# Figure out if certain files and directories already exist.
#

# The system-wide go binary directory
  - stat: path=/usr/local/go
    register: godir

# Bagman deps.
  - stat: path=/usr/local/bin/gpm
    register: gpm
  - stat: path=/home/{{system_default_user}}/go/src/github.com/bitly/nsq/
    register: nsqlibs
  - stat: path=/home/{{system_default_user}}/go/src/github.com/crowdmob/goamz/aws
    register: awslibs
  - stat: path=/home/{{system_default_user}}/go/src/github.com/crowdmob/goamz/s3
    register: s3libs
  - stat: path=/home/{{system_default_user}}/go/src/github.com/op/go-logging
    register: logginglibs
  - stat: path=/home/{{system_default_user}}/go/src/github.com/satori/go.uuid
    register: uuidlibs
  - stat: path=/home/{{system_default_user}}/go/src/github.com/rakyll/magicmime
    register: mimelibs
  - stat: path=/home/{{system_default_user}}/go/src/github.com/APTrust/bagins
    register: baginslibs
  - stat: path=/home/{{system_default_user}}/go/bin/nsqd
    register: nsqd_binaries


# The bagman source code directory
  - stat: path=/home/{{system_default_user}}/go/src/github.com/APTrust/bagman
    register: bagman

# Emacs with golang-mode for editing
  - name: emacs
    sudo: yes
    apt: pkg={{item}} state=present
    with_items:
        - emacs23-nox
        - golang-mode
    tags:
        - packages
        - editors

# Source control tools. Required for go get
  - name: source control clients
    sudo: yes
    apt: pkg={{item}} state=present
    with_items:
        - git
        - bzr
        - mercurial
    tags:
        - packages
        - source control

# Requirements for C extension https://github.com/rakyll/magicmime
# Problem here. We need to build against an older commit.
#
# cd ~/go/src/github.com
# mkdir rakyll
# cd rakyll
# git clone https://github.com/rakyll/magicmime.git
# cd magicmime
# git reset --hard 672bd9146d1802abfd8a851fb428e6070d524e3d
  - name: magicmime dependency
    sudo: yes
    apt: pkg={{item}} state=present
    with_items:
        - libmagic-dev
    tags:
        - packages
        - magicmime


# Curl is required for the install_go_1.4.sh script
  - name: curl
    sudo: yes
    apt: pkg=curl state=present
    tags: packages


# Install the Go 1.4 binaries
  - name: Install Go 1.4
    when: not godir.stat.exists
    sudo: yes
    shell: "curl https://storage.googleapis.com/golang/go1.4.linux-amd64.tar.gz | sudo tar xz -C /usr/local | rm"
    tags: go-binaries

#CD3EF: This is discriminating vim users :) If we use our own users to login, we can use `sudo -E` to preserve our env.
  - name: set editor in .bash_profile
    lineinfile: >
      dest={% if ansible_distribution == "MacOSX"%}/home/{{system_default_user}}/.bash_profile{% else %}/home/{{system_default_user}}/.profile{% endif %}
      create=yes
      mode=0644
      state=present
      line="export EDITOR=emacs"

  - name: set aws access key in .bash_profile
    lineinfile: >
      dest={% if ansible_distribution == "MacOSX" %}/home/{{system_default_user}}/.bash_profile{% else %}/home/{{system_default_user}}/.profile{% endif %}
      state=present
      line="export AWS_ACCESS_KEY_ID="{{ var_aws_access_key_id }}

  - name: set aws secret key in .bash_profile
    lineinfile:
      dest={% if ansible_distribution == "MacOSX" %}/home/{{system_default_user}}/.bash_profile{% else %}/home/{{system_default_user}}/.profile{% endif %}
      state=present
      line="export AWS_SECRET_ACCESS_KEY="{{ var_aws_secret_access_key }}

  - name: set go path in .bash_profile
    lineinfile:
      dest={% if ansible_distribution == "MacOSX" %}/home/{{system_default_user}}/.bash_profile{% else %}/home/{{system_default_user}}/.profile{% endif %}
      state=present
      line="export GOPATH=$HOME/go"

  - name: set path in .bash_profile or .profile
    lineinfile:
      dest={% if ansible_distribution == "MacOSX"%}/home/{{system_default_user}}/.bash_profile{% else %}/home/{{system_default_user}}/.profile{% endif %}
      state=present
      line="export PATH=\"$GOPATH/bin:$PATH:/usr/local/go/bin:/home/{{ system_default_user }}/.rbenv/plugins/ruby-build/bin\""

# Following are two settings that allow the Go services to
# connect to Fluctus. You will have to set the API key manually
# after the system is running.
  - name: set fluctus API user in .bash_profile
    lineinfile:
      dest={% if ansible_distribution == "MacOSX" %}/home/{{system_default_user}}/.bash_profile{% else %}/home/{{system_default_user}}/.profile{% endif %}
      state=present
      line="export FLUCTUS_API_USER='system@aptrust.org'"

  - name: set fluctus API key in .bash_profile
    lineinfile:
      dest={% if ansible_distribution == "MacOSX" %}/home/{{system_default_user}}/.bash_profile{% else %}/home/{{system_default_user}}/.profile{% endif %}
      state=present
      line="export FLUCTUS_API_KEY='GENERATE API KEY THROUGH WEB UI AND SET IN /home/{{system_default_user}}/.bash_profile'"


# Add /usr/local/go/bin to system-wide path var
  - name: add {{item}} to path
    sudo: yes
    lineinfile:
      dest=/etc/environment
      state=present
      backrefs=yes
      regexp='PATH=(["]*)((?!.*?{{item}}).*?)(["]*)$'
      line="PATH=\1\2:{{item}}\3"
    with_items:
      - /usr/local/go/bin

# Install NSQD binaries. These are currently going into a path
# under home/vagrant. Should they go into /usr/local/bin?
  - name: install nsqd binaries
    script: install_nsq.sh
    when: not nsqd_binaries.stat.exists
    tags: go-libs
    environment:
      HOME: /home/{{ system_default_user }}
      GOPATH: /home/{{ system_default_user }}/go
      PATH:   /bin:/usr/bin:/usr/local/go/bin


# Load env vars. We need PATH, GOPATH, GOROOT. Note that source does not work.
# See http://stackoverflow.com/questions/22256884/not-possible-to-source-bashrc-with-ansible

# Install Go packages required by bagman. We don't want to pull
# down the dependencies if they're already there, because we might
# wind up getting a version newer than what we're prepared to
# work with. E.g. new source libraries with breaking changes.


# Installing gpm as recommended in its repository.
  - name: Install Go Package Manager
    sudo: yes
    get_url:
      url="https://raw.githubusercontent.com/pote/gpm/v1.3.2/bin/gpm"
      dest="/usr/local/bin"
      mode="0755"
    when: not gpm.stat.exists
    tags: go-libs
    environment:
      GOPATH: /home/{{ system_default_user }}/go
      PATH:   /bin:/usr/bin:/usr/local/go/bin

# This command may fail with 'killed' if your VM has < 2GB RAM
# The Go compiler will use less RAM if set the VM's number of
# cores down to 1 or 2. It runs concurrent compiles on each core.
  - name: Install NSQ libs
    shell: go get github.com/bitly/nsq/...
    when: not nsqlibs.stat.exists
    environment:
      GOPATH: /home/{{ system_default_user }}/go
      PATH:   /bin:/usr/bin:/usr/local/go/bin

  - name: Install AWS libs
    shell: go get github.com/crowdmob/goamz/aws
    when: not awslibs.stat.exists
    environment:
      GOPATH: /home/{{ system_default_user }}/go
      PATH:   /bin:/usr/bin:/usr/local/go/bin

  - name: Install S3 libs
    shell: go get github.com/crowdmob/goamz/s3
    when: not s3libs.stat.exists
    environment:
      GOPATH: /home/{{ system_default_user }}/go
      PATH:   /bin:/usr/bin:/usr/local/go/bin

  - name: Install Go Logging libs
    shell: go get github.com/op/go-logging
    when: not logginglibs.stat.exists
    environment:
      GOPATH: /home/{{ system_default_user }}/go
      PATH:   /bin:/usr/bin:/usr/local/go/bin

  - name: Install Go UUID libs
    shell: go get github.com/satori/go.uuid
    when: not uuidlibs.stat.exists
    environment:
      GOPATH: /home/{{ system_default_user }}/go
      PATH:   /bin:/usr/bin:/usr/local/go/bin

# Using git to get specific version. Package does not have other
# dependencies that we would miss using git rather than go get
  - name: Install Go MagicMime lib
    git:
      repo=https://github.com/rakyll/magicmime.git 
      dest=/home/{{ system_default_user }}/go/src/github.com/rakyll/magicmime
      version=672bd9146d1802abfd8a851fb428e6070d524e3
    when: not mimelibs.stat.exists
    environment:
      GOPATH: /home/{{ system_default_user }}/go
      PATH:   /bin:/usr/bin:/usr/local/go/bin

  - name: Install bagins lib
    shell: go get github.com/APTrust/bagins
    when: not baginslibs.stat.exists
    environment:
      GOPATH: /home/{{ system_default_user }}/go
      PATH:   /bin:/usr/bin:/usr/local/go/bin


# Check out the bagman repo in read/write mode,
# only if it's not already there.
  - name: Checkout bagman repo
    when: not bagman.stat.exists
    git:
      #repo=ssh://git@github.com/APTrust/bagman.git
      repo=git://github.com/APTrust/bagman.git
      dest=/home/{{system_default_user}}/go/src/github.com/APTrust/bagman
      accept_hostkey=yes
    tags:
        - go-libs
        - bagman

# Build bagman binaries
  - name: Build bagman binaries
    when: not bagman.stat.exists
    shell: $BAGMAN_HOME/scripts/build.sh
    environment:
      BAGMAN_HOME: /home/{{system_default_user}}/go/src/github.com/APTrust/bagman
      GOPATH: /home/{{system_default_user}}/go
      PATH:   /bin:/usr/bin:/usr/local/go/bin
