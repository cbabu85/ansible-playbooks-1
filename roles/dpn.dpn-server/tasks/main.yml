---
# This installs DPN-SERVER from https://github.com/dpn-admin/dpn-server

  - name: install required packages
    become: yes
    apt: pkg={{item}} state=present update_cache=yes
    with_items:
        - sqlite3
        - libmysqlclient-dev
        - libsqlite3-dev
        - postgresql-client
        - libpq5
        - libpqxx-dev
        - libssl-dev
        - nodejs
        - zip
        - mailutils
    environment:
       DEBIAN_FRONTEND: noninteractive
    tags:
        - packages
        - rails dependencies

# Set ruby interpreter version for dpn
# Note: This deviates from dpn-server standard setup which uses rvm
  - name: Set Ruby interpreters ruby_version
    shell: bash -lc "rbenv local {{ruby_version}}"
    args:
      chdir: "{{dpnserver_app_root}}"
      creates: "{{dpnserver_app_root}}/.ruby-version"
    environment: "{{ruby_env}}"
    become: yes
    become_user: "{{ system_default_user }}"
    tags: rbenv_dpn

# Copy Gemfile.local for APTrust specific gems (pg, figaro)
  - name: Copy Gemfile.local for APTrust Gems
    template:
        src: "Gemfile.local"
        dest: "{{dpnserver_app_root}}/Gemfile.local"
        owner: "{{system_default_user}}"
        group: "{{deploy_group}}"
        mode: 0644

# Install Bundler
  - name: Install Bundler
    become: true
    become_user: "{{ system_default_user }}"
    gem:  name=bundler state=latest user_install=yes

# Copy config ymls
# This is the same action rake -T config takes, but files # are using env vars
# provided by figaro and application.yml
  - name: Copy dpn-server app configs
    template:
        src: "{{item}}.yml.j2"
        dest: "{{dpnserver_app_root}}/config/{{item}}.yml"
        owner: "{{system_default_user}}"
        group: "{{deploy_group}}"
        mode: 0644
    with_items:
        - database
        - dpn
        - resque-pool
        - resque
        - secrets

# Install Gems from Gemfile
  - name: Install dpn gems
    become: true
    become_user: "{{ system_default_user }}"
    bundler: state=present chdir="{{dpnserver_app_root}}"
    tags: dpngems

# Create DB on RDS if it doesn't exist.
# Note: When command is changed to modify, comment [db_name, subnet, tags] out.
  - name: Create DB on RDS
    rds:
        command: create
        instance_name: "dpn-{{RAILS_ENV}}"
        instance_type: "{{ dpnserver_rds_instance_type | default('db.t2.small') }}"
        size: "{{dpnserver_db_size | default('16') }}"
        username: "{{dpnserver_db_user}}"
        password: "{{dpnserver_db_pwd}}"
        db_name: "{{dpnserver_db_name}}"
        db_engine: postgres
        multi_zone: "{{dpnserver_rds_multi_az | default('no')}}"
        region: "{{dpnserver_rds_region | default('us-east-1')}}"
# TODO: dependent on environment. set default to demo
# Note: security group name doesn't work, only id. Security groups have to be
#       configured manually via AWS web console.
        vpc_security_groups: "{{  dpnserver_vpc_sec_group | default('sg-65b4211f') }}"
        subnet: "{{ dpnserver_rds_subnet | default('demo') }}"
# Note: Timeout is set high since inital RDS creation may take a while.
        wait_timeout: 600
        wait: yes
        aws_access_key: "{{ lookup('env','AWS_ACCESS_KEY_ID') }}"
        aws_secret_key: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"
        backup_retention: "{{dpnserver_rds_backup_retention | default('1')}}"
        backup_window: '10:00-10:30'
        maint_window: 'Tue:10:30-Tue:11:00'
        tags:
            Environment: "{{RAILS_ENV}}"
    tags: createrds, appenv, deployenv
    register: rds_facts
    when: dpnserver_local_db == False

  - name: Set RDS db_host fact
    set_fact: dpnserver_db_host="{{rds_facts.instance.endpoint}}"
    when: dpnserver_local_db == False
    tags: appenv, deployenv

  - name: Set local db_host fact
    set_fact: dpnserver_db_host="localhost"
    when: dpnserver_local_db == true
    tags: appenv, deployenv

# AWS EFS for staging directory
# sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 fs-b915cef0.efs.us-east-1.amazonaws.com:/ efs
  - name: Ensure EFS mounting directory exist
    file:
        path: "{{dpnserver_efs_mountpoint}}"
        state: directory
        owner: "{{system_default_user}}"
        group: "{{deploy_group}}"
        mode: 0775
    when: use_efs == true and ansible_bios_version != "VirtualBox"

  - name: Mount EFS staging directory
    mount:
        name: "{{dpnserver_efs_mountpoint}}"
        src: "{{dpnserver_efs_mounttarget}}"
        fstype: nfs4
        opts: rw,nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,
        state: present
    when: use_efs == true and ansible_bios_version != "VirtualBox"

# TODO: May want to add a task if a non-RDS db instance already exists.
#       In which case we will need an db address to connect to.
  - include: postgresql.yml
    when: ansible_bios_version == "VirtualBox" or dpnserver_local_db == true

# Note: This creates a dependency on ansistrano-deploy
  - name: Get Git Hash Fact
    shell: tail -n1 "{{dpnserver_app_root}}/REVISION" | cut -c1-5
    register: dpn_timestamp
    tags: appenv, deployenv

  - name: Set Release fact
    set_fact: DPNSERVER_RELEASE="{{dpn_timestamp.stdout}}"
    tags: appenv, deployenv

  - name: Define application environment configuration
    template:
        src: application.yml.j2
        dest: "{{dpnserver_app_root}}/config/application.yml"
        owner: "{{system_default_user}}"
        group: "{{deploy_group}}"
        mode: 0644
    vars:
        DPNSERVER_RELEASE: "{{DPNSERVER_RELEASE}}"
    tags: appenv

  - name: Define deploy user environment
    template:
        src: bash_profile.yml.j2
        dest: "/home/{{system_default_user}}/.bash_profile"
        owner: "{{system_default_user}}"
        group: "{{deploy_group}}"
        mode: 0644
    tags: deployenv

# TODO: This is just temporary for development. production.rb should be copied instead as the demo environment should be identical.
  - name: Copy development to demo environment
    copy:
        src: "{{dpnserver_app_root}}/config/environments/development.rb"
        dest: "{{dpnserver_app_root}}/config/environments/demo.rb"
        remote_src: true
        owner: "{{system_default_user}}"
        group: "{{deploy_group}}"
        mode: 0644
    when: "'demo' in ansible_hostname"

  - name: Migrate DB Schema
    shell: chdir="{{dpnserver_app_root}}" bundle exec rake db:migrate RAILS_ENV="{{RAILS_ENV}}"
    become: true
    become_user: "{{ system_default_user }}"
    notify: reload nginx
    tags: dbmigrate

# Setup default admin user
  - name: Create default admin user
    shell: "RAILS_ENV={{RAILS_ENV}} rake db:admin_user && touch log/.admin_user_created"
    args:
        chdir: "{{dpnserver_app_root}}"
        creates: "{{dpnserver_app_root}}/log/.admin_user_created"
    when: "'demo' in ansible_hostname"
    tags: nodeconfig, adminuser
#
# Copy DPN nodes config script
  - name: Copy node config script
    template:
        src: node_config.rb.j2
        dest: "{{dpnserver_app_root}}/lib/tasks/node_config.rb"
        owner: "{{system_default_user}}"
        group: "{{deploy_group}}"
        mode: 0644
    with_items: "{{ dpnserver_nodes | list }}"
    tags: OLDnodeconfig

  - name: Copy node seeds json
    template:
        # src: node_{{RAILS_ENV}}_seeds.json.j2
        src: node_seeds.json.j2
        dest: "{{dpnserver_app_root}}/db/seeds/{{RAILS_ENV}}.seeds.json"
        owner: "{{system_default_user}}"
        group: "{{deploy_group}}"
        mode: 0644
    with_items: "{{ dpnserver_nodes | list }}"
    tags: nodeconfig

  - name: Seed {{RAILS_ENV}} env nodes
    shell: chdir="{{dpnserver_app_root}}" RAILS_ENV="{{RAILS_ENV}}" rake db:seed
    tags: nodeconfig

#  - name: debug nested
#    debug: msg="node {{ item.key }} is {{ item.value.name }} ({{ item.value.token }}) {{item.value.credential}}"
#    with_dict: "{{dpnserver_nodes}}"
#    tags: nested
#
# Configure Nodes
#   - name: Configure DPN nodes
#    shell: bundle exec rails runner "eval(File.read 'lib/tasks/node_config.rb')"
#    args:
#        chdir: "{{dpnserver_app_root}}"
#    with_dict: "{{dpnserver_nodes}}"
#    tags: nodeconfig

# TODO: DPN NEEDS SOMETHING DIFFERENT TO SET UP ACCOUNTS.
#  - name: Initial dpn setup
#    shell: chdir="{{dpnserver_app_root}}" bundle exec rake dpn:setup RAILS_ENV="{{RAILS_ENV}}"
#    become: true
#    become_user: "{{ system_default_user }}"

  - name: Assets precompile
    shell: chdir="{{dpnserver_app_root}}" bundle exec rake assets:precompile RAILS_ENV="{{RAILS_ENV}}"
    become: true
    become_user: "{{ system_default_user }}"
    notify: reload nginx

  - name: Setup log rotation
    template:
        src: logrotation.yml.j2
        dest: "/etc/logrotate.d/dpn-server_{{APP_ENV}}"
        owner: "root"
        group: "{{deploy_group}}"
        mode: 0644
    tags: dpn-server_logrotate

