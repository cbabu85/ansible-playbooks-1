# Message of the day explaining server is under control of Ansible.
#
- name: MOTD
  become: yes
  template: src=motd.j2 dest=/etc/motd owner=root mode=0644
  tags: common

- name: Create Deploy group
  group: name=deploy state=present gid=1234

- name: Create /mnt/aptrust if not mounted already.
  file:
    path: /mnt/aptrust
    owner: "{{system_default_user}}"
    group: "{{system_deploy_group}}"
    mode: 0755
    state: directory
  when: ansible_bios_version != 'Virtualbox'

##
# Adding common users to the system.
#
- name: add common users
  become: yes
  user: name="{{ item.name }}"
        password='{{ item.passwd }}'
        state=present
        groups={% if ansible_bios_version != 'VirtualBox' %}{{ 'admin,adm,deploy,www-data' }}{% else %}{{'adm,deploy,www-data' }}{% endif %}
        shell='/bin/bash'
  tags: common
  # Don't show and log the password hash to everybody.
  # no_log: True
  with_items:
#    PW hash file needs to be added. mkpasswd -m
#    - { name: 'andrew.diamond', passwd: "{{ lookup('file', 'creds/andrew.diamond') }}" }
    - { name: 'cd3ef', passwd: "{{ var_cd3ef_password }}" }
    - { name: "{{ system_default_user}}", passwd: "{{ var_aptdeploy_password }}" }

- name: add common user public keys
  become: yes
  authorized_key: user={{ item.name }} key="{{ item.pubkeyfile }}" state=present
  tags: common
  with_items:
## Keys can be stored encrypted as a variable in group_vars/vault.yml or directly imported from GitHub
#    - { name: 'andrew.diamond', keyfile: '~/.ansible/external/files/public_keys/diamond_pub' }
#    - { name: 'cd3ef', pubkeyfile: "{{ inventory_dir }}/group_vars/vault/users/cd3ef/cd3ef2.pub" }
#    - { name: 'cd3ef', pubkeyfile: "{{ var_cd3ef_sshkey }}" }
#    - { name: 'andrew.diamond', pubkeyfile: "http://github.com/diamondap.keys" }
    - { name: 'cd3ef', pubkeyfile: "http://github.com/cdahlhausen.keys" }
    - { name: "{{system_default_user}}", pubkeyfile: "{{var_aptdeploy_sshkey }}" }

- name: add deploy user's private key
  become: yes
  become_user: "{{ system_default_user }}"
  copy: >
    content="{{var_aptdeploy_sshkey_private}}"
    dest=/home/{{system_default_user}}/.ssh/id_rsa
    mode=0600
    owner="{{system_default_user}}"
#
# Removing old user accounts
#
- name: Remove old user accounts
  become: yes
  user: name="{{ item }}" state=absent remove=yes
  with_items:
    - scott.turnbull
  tags: remove_user

## Making sure github.com is a known_host
- name: Ensure github.com is a known host
  become_user: "{{ system_default_user }}"
  lineinfile:
    dest: /home/{{ system_default_user }}/.ssh/known_hosts
    create: yes
    state: present
    line: "{{ lookup('pipe', 'ssh-keyscan -t rsa github.com') }}"
    regexp: "^github\\.com"


# We might want to tighten this. Sudo pwd is helpful and more secure.
# If ops/stage user ubuntu: could have restrictive settings.
- name: Modifiy admins so they need no sudo password
  become: yes
  tags: common
  lineinfile: dest=/etc/sudoers state=present regexp='^%admin ALL\=' line='%admin ALL=(ALL) NOPASSWD:ALL' validate='visudo -cf %s'

##
# Install base packages
#
- name: install base packages
  become: yes
  tags: packages
  apt: pkg={{ item }} state=latest update_cache=true
  with_items:
    - sudo
    - curl
    - mailutils
    - wget
    - build-essential
    - software-properties-common
    - git-core
    - tig
    - tmux
    - htop
    - iotop
    - bmon
    - vim-tiny
    - emacs23-nox
    - unzip
    - tar

##
# Sendmail aliases workaround
# This makes sure that root and ubuntu user emails
# are being sent to ops@aptrust.org
#
- name: Check if postfix is installed
  shell: dpkg-query -W 'postfix'
  ignore_errors: True
  register: is_postfix
  changed_when: "is_postfix.rc != 0"
  failed_when: >
        is_postfix.rc != 0 and ('already exists' not in is_postfix.stderr)

- name: Aliasing email addresses
  become: yes
  tags: configuration
  copy: src='aliases' dest=/etc/aliases owner=root group=root mode=0644 backup=yes
  register: result_aliasing

- name: Activate email aliases
  become: yes
  tags: configuration
  shell: newaliases
  when: result_aliasing|changed

##
# Add monitoring script for disk space usage.
# Workaround in lieu of monitoring application.
#
- name: Add diskcheck.py
  become: yes
  tags: configuration
  git: repo=https://github.com/cdahlhausen/ops_scripts.git
       dest=/srv/ops_scripts
       accept_hostkey=yes
       force=yes

- name: Add diskcheck cron job
  tags: common, cron
  cron: name="Check disk space" minute="*/10" hour="*" job="/srv/ops_scripts/diskcheck.py"


# Install Security updates periodically
#- name: Install unattended-upgrades
#   action: apt pkg=unattended-upgrades state=present

#  - name: Adjust APT update intervals
#NEED to ADJUST
#    action: copy src=config/apt_periodic dest=/etc/apt/apt.conf.d/10periodic

#  - name: Make sure unattended-upgrades only installs from $ubuntu_release-security
#    action: lineinfile dest=/etc/apt/apt.conf.d/50unattended-upgrades regexp="$ubuntu_release-updates" state=absent

#
