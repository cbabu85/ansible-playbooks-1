---
# This is used to ramp up a new institution and not require manual GUI interaction
# It will do the following tasks:
# 1. Create S3 buckets
# 2. Create IAM Group
# 3. Create IAM Users
# 4. Setup an IAM policy to manage access to S3 buckets
# 4. Apply the IAM inline policy to the groups (test/prod)

# inst_id: The ID the institution goes by. Usually organized by domain names,
#          e.g. UVa -> virginia.edu
#
# Sub accounts: Sub accounts can be schools/departments within institutions,
#               at UVa the Law Library would be a sub-account and hence go by
#               viul.virginia.edu and have their own IAM groups, users and buckets.
# Subscriber accounts: Are managed the same way as sub accounts.
#
# TODO: Create a nested dict that includes all member inst, subscribers and sub
# accounts and their users. Can be used to ensure consistent state as well as
# consistent tagging. Needs to be encrypted in vault.
    # Example dict to iterate over
    # { inst_idv: 'viul' , inst_member: virginia, inst_type: 'subaccount', inst_users: ('loren.moulds','humpty dumpty')}
#
# TODO: Move play into role to allow for IAM template.

# TODO: Template data structure for all institutions. Should go in group vars.
#  can ideally be used to rebuild all buckets and inst users. Will ensure
#  consistent state of APTrust infrastructure.
# It's probably easiest to define it as a nested dict, as follows
# Institution:
# - inst_id: uva
#   - inst_name: University of Virginia
#   - inst_member: uva
#   - inst_type: member
#   - inst_users:
#      - joe.schmo
#      - betty.sue
#      - christian.dahlhausen
#   - inst_admin:
#      - christian.dahlhausen
#
# Note: Each institution could 'live' in a separate encrypted group var file like
# group_vars/institutions/virginia.edu.yml
# group_vars/institutions/vt.edu.yml
#
# TODO: Think of more sensible AWS tags.
# TODO: Needs testing with test institution to ensure nothing is removed or it
# does not throw errors.

- name: Setting up AWS buckets and groups
  hosts: localhost
  connection: local
  gather_facts: False
  become: no

  vars:
    # ID without .edu
    inst_id: nd
    inst_name: 'University of Notre Dame'
    # Member institution, may be the same as inst_id if it's a member institution
    inst_member: nd
    # member, subscriber, or subaccount
    inst_type: member
    inst_users:
      - alexander.papson
      - patrick.rader
      #      - christian.dahlhausen.test

  tasks:
    - name: Create S3 buckets
      s3_bucket:
        name: "aptrust.{{ item }}.{{inst_id}}.edu"
        state: present
        tags:
          institution: "{{inst_id}}"
          institution_name: "{{inst_name}}"
          institution_type: "{{inst_type}}"
          institution_member: "{{inst_member}}"
      with_items:
          - receiving
          - restore
          - receiving.test
          - restore.test
      register: new_buckets
      tags: new_buckets

      # Bug: https://github.com/boto/boto/issues/2836
      #    - name: Enable S3 logging
      #s3_logging:
      #   name: "{{ item.name }}"
      #   target_bucket: "aptrust.s3.logs"
      #   target_prefix: "{{item.name}}"
      #   state: present
      #   region: us-east1
      #   validate_certs: no
      #with_items:
      # - "{{new_buckets.results}}"
      #tags: new_buckets

    - name: Create IAM Group
      iam:
        iam_type: group
        name: "{{ item }}"
        state: present
      with_items:
        - "{{inst_id}}.edu.users"
        - "test.{{inst_id}}.edu.users"
      register: new_groups
      tags: iamgroups

    - debug: msg="{{item.group_name}}, {{inst_users}}"
      with_items:
        -  "{{ new_groups.results }}"
      tags: iamgroups

    - name: Add users to created groups
      iam:
        iam_type: user
        name: "{{item.1}}"
        state: present
        groups: "{{ item.0.group_name }}"
      with_nested:
        -  "{{ new_groups.results }}"
        -  "{{ inst_users }}"
      tags: iamgroups

# TODO: This needs some logic somewhere to support test and prod namespaces.
# group_name have .users suffix that could be trimmed with regex.
#    - name: Assign IAM policy to user groups
#      iam_policy:
#        iam_type: group
#        iam_name: "{{ item.0.group_name }}"
#        policy_name: "{{inst_id}}.edu-s3policy"
#        state: present
#        policy_document: s3-test-policy.json.j2
#      with_together:
#        - "{{ new_groups.results }}"
#        - test
