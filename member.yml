---
# This is used to ramp up a new member and not require manual GUI interaction
# It will do the following tasks:
# 1. Create S3 buckets
# 2. Create IAM Group
# 3. Create IAM Users
# 4. Setup an IAM policy to manage access to S3 buckets
# 5. Apply the IAM inline policy to the groups (test/prod)
# 6. Setup logging of S3 buckets to aptrust.s3.logs bucket
# 7. Setup lifecycle rules of S3 buckets

# This playbook utilizes encrypted data structures in the group_vars/members/[inst_id].yml
# inst_id: The ID the institution goes by. Usually organized by domain names,
#          e.g. UVa -> virginia
# inst_id_suffix: edu|org|etc
# inst_type: member, sub, subs
# // Member: Sustaining member account.
# // Sub accounts: Sub accounts can be schools/departments within institutions,
# //              at UVa the Law Library would be a sub-account and hence go by
# //              viul.virginia.edu and have their own IAM groups, users and buckets.
# // Subscriber accounts: Are managed the same way as sub accounts.
# inst_name: "Full name of entity"
# inst_member: virginia # Self referencing if memberfile is sust. APT member
# inst_users: #List of user names, format: firstname.lastname
# inst_admin: #List of user names, repeats one or more user names from inst_users.

# EXAMPLE
# virginia.yml:
## inst_id: virginia
## inst_type: member
## inst_member: virginia # Self referencing if memberfile is sust. APT member
##
#
# Note: Each institution is in a separate encrypted group var file like
# group_vars/members/virginia.yml
# group_vars/members/vt.yml
#
# To run this playbook for a particular member,
# change the inst_id and inst_suffix in the vars below

- name: Setting up AWS buckets and groups
  hosts: localhost
  connection: local
  gather_facts: False
  become: no

  vars:
    # ID without suffix (e.g. .edu)
    inst_id: cd3ef
    inst_suffix: edu
    # These should go in roles default vars
    inst_groups:
        - "{{inst_id}}.{{inst_id_suffix}}.users"
        - "test.{{inst_id}}.{{inst_id_suffix}}.users"

  vars_files:
    - "group_vars/members/{{inst_id}}.{{inst_suffix}}.yml"

  tasks:
    - name: Create S3 buckets
      s3_bucket:
        name: "aptrust.{{ item }}.{{inst_id}}.{{inst_id_suffix}}"
        state: present
        validate_certs: no
        tags:
          institution: "{{inst_id}}"
          institution_name: "{{inst_name}}"
          institution_type: "{{inst_type}}"
          institution_member: "{{inst_member}}"
      with_items:
        #          - logs
          - receiving
          - restore
          - receiving.test
          - restore.test
      register: new_buckets
      tags: new_buckets, justbuckets

      # Bug: https://github.com/boto/boto/issues/2836
      ## Fixed in boto3 but s3_logging is using boto. May be possible to rewrite but for now using awscli alternative.
      #    - name: Enable S3 logging
      # s3_logging:
      #   name: "{{ item.name }}"
      #   target_bucket: "aptrust.logs.{{inst_id}}.{{inst_id_suffix}}"
      #   target_prefix: "{{item.name}}"
      #   state: present
      #   region: us-east-1
      #   validate_certs: no
      #with_items:
      # - "{{new_buckets.results}}"
      #tags: new_buckets

    - name: Setup S3 Logging per awscli (ugly but works)
      shell: 'echo { \"LoggingEnabled\": { \"TargetBucket\": \"aptrust.s3.logs\", \"TargetPrefix\": \"{{item.name}}/\"} } > /tmp/logging.json && aws s3api put-bucket-logging --bucket {{item.name}} --bucket-logging-status file:///tmp/logging.json'
      with_items:
        - "{{new_buckets.results}}"

#       # The s3_lifecyle module is incomplete which is why we revert to use awscli
#    # version below.
#    # See https://github.com/ansible/ansible/issues/43434
#   - name: Set up lifecycle polices for buckets
#      s3_lifecycle:
#         name: "aptrust.{{ item.name }}.{{inst_id}}.{{inst_id_suffix}}"
#         status: enabled
#         state: present
#         expiration_days: "{{ item.days }}"
#         rule_id: "Clear {{item.name}}.{{inst_id}} bucket after {{ item.days}} days"
#      with_items:
#        - { name: receiving, days: 60, incomplete: 7 }
#        - { name: receiving.test, days: 30, incomplete: 7 }
#        - { name: restore, days: 14, incomplete: 7 }
#        - { name: restore.test, days: 7, incomplete: 7 }
#      tags: lcycle

    - name: Setup S3 Lifecycle policies (cli-verision because Ansible module is insufficient.)
      command: >
           aws s3api put-bucket-lifecycle-configuration
            --bucket "aptrust.{{ item.name }}.{{inst_id}}.{{inst_id_suffix}}"
            --lifecycle-configuration '{"Rules":[{"ID":"Expiration {{item.days}} Days","Prefix":"","Status":"Enabled","Expiration":{"Days":{{item.days}}},"AbortIncompleteMultipartUpload":{"DaysAfterInitiation":{{item.incomplete}}}}]}'
      with_items:
        - { name: receiving, days: 60, incomplete: 7 }
        - { name: receiving.test, days: 30, incomplete: 7 }
        - { name: restore, days: 14, incomplete: 7 }
        - { name: restore.test, days: 7, incomplete: 7 }
      tags: lcyclecli

    - name: Create IAM Group
      iam:
        iam_type: group
        name: "{{ item }}"
        state: present
      with_items: "{{inst_groups}}"
      register: new_groups
      tags: iamgroups, always

    - name: Add users to created test group
      iam:
        iam_type: user
        name: "{{item.name}}"
        state: present
        groups: "test.{{inst_id}}.{{inst_id_suffix}}.users"
      with_items:
          -  "{{ inst_users }}"
          #      when: {{item.name}} | search('test')
      when: '"test" in item.name'
      tags: iamgroups

    - name: Add users to created prod group
      iam:
        iam_type: user
        name: "{{item.name}}"
        state: present
        groups: "{{inst_id}}.{{inst_id_suffix}}.users"
      with_items:
          -  "{{ inst_users }}"
      when: '"test" not in item.name'
      tags: iamgroups

    - name: Add metadata tags to users
      command: >
          aws iam tag-user --user-name "{{item.name}}"
          --tags Key=email,Value="{{item.email}}" Key=phone,Value="{{item.phone}}" Key=institution,Value="{{inst_name}}"
          --debug
      #aws iam create-user --user-name john.wayne --tags Key=CostCenter,Value=1234, Key=EmailID,Value=john@example.com
      with_items:
        -  "{{ inst_users }}"
      tags: iamgroups, taggin

      # A bug in the iam_policy module is sending json as dict not as raw text,
      # therefore jinja string filter has to be applied outside of the task.
      # per official workaround:
      # https://github.com/ansible/ansible/issues/7005#issuecomment-42894813
    - name: set policydata
      set_fact:
         s3policydata: "{{ lookup( 'template', 'roles/aptrust.member/templates/s3_policy.json.j2') | string }}"
      tags: iampol

      # A bug in the iam_policy module is sending json as dict not as raw text,
      # therefore jinja string filter has to be applied outside of the task.
      # per official workaround:
      # https://github.com/ansible/ansible/issues/7005#issuecomment-42894813
    - name: set policydata_test
      set_fact:
         s3policydatatest: "{{ lookup( 'template', 'roles/aptrust.member/templates/s3_policy_test.json.j2') | string }}"
      tags: iampol

    - name: Assign IAM policy to user groups
      iam_policy:
        iam_type: group
        iam_name: "{{ item.0 }}"
        policy_name: "{{inst_id}}-{{inst_id_suffix}}-{{item.2}}-s3policy"
        state: present
        policy_json: "{{item.1 }}"
      with_together:
        - [ 'test.{{inst_id}}.{{inst_id_suffix}}.users', '{{inst_id}}.{{inst_id_suffix}}.users' ]
        - [ '{{s3policydatatest}}','{{s3policydata}}' ]
        - ['test','prod']
      tags: iampol

# TODO: Create credentials when creating users and print to stdout or put into encrypted var file for initial distribution

    - name: Create user credentials for testing
      iam:
        iam_type: user
        name: foobar
        state: present
        access_key_state: create
      register: credentials
      tags: iamcred

    - debug: var=credentials
      tags: iamcred

    - debug:
        msg: "{{ credentials.user_meta.access_keys | json_query('[].access_key_id') }}"
      tags: iamcred
# TODO: Support users for test und prod groups. Not all users should be in all groups per default.
# Test1: Add a user (not in yml) to group, run this play and see if it removes the user.
# --> Keeps user in group.
# Test2: Are existing IAM policies removed when running this play?


