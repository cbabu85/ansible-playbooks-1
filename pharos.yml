---
# Deploy on all pharos servers:
#  ansible-playbook pharos.yml -t deploy --diff
# Deploy on a specific pharos server:
#  ansible-playbook pharos.yml -t deploy --diff -l apt-demo-repo2
# Deploy a specific branch of pharos:
#  ansible-playbook pharos.yml -t deploy --diff -e ansistrano_git_branch=<specific_branchname>
-   hosts:
     - pharos-servers
     - docker1

    vars_files:
        - "group_vars/vault.yml"

    environment: "{{ruby_env}}"

    vars:
        playbook_name: pharos
        ansistrano_deploy_to: "/var/www/{{ansible_fqdn}}/{{playbook_name}}"
        ansistrano_deploy_via: "git"
        ansistrano_git_repo: "git@github.com:APTrust/pharos.git"
        ansistrano_git_branch: "develop"
        # Note: key_path rewritten to support ssh key as variable not file.
        ansistrano_git_identity_key_path: "{{aptdeploy_sshkey_private}}"
        ansistrano_shared_paths: ["log"]
        ansistrano_keep_releases: 3
        # Check disabled to allow for symlink to central log directory for
        # log file persistence
        ansistrano_ensure_shared_paths_exist: yes
        ansistrano_ensure_basedirs_shared_paths_exist: yes

        # Pharos Role
        pharos_app_root: "{{ ansistrano_deploy_to }}/current"
        pharos_environment: "{{ruby_env}}"
        pharos_logserver: logs.aptrust.org

        # NGINX Webserver
        install_passenger: true

        nginx_vhosts:
          - listen: "443 ssl"
            server_name: "{{ansible_fqdn}}"
            root: "{{ ansistrano_deploy_to }}/current/public"
            access_log: "/var/log/nginx/{{ansible_fqdn}}_access.log"
            error_log: "/var/log/nginx/{{ansible_fqdn}}_error.log"
            extra_parameters: |
                passenger_enabled on;
                passenger_base_uri /;
                passenger_app_root {{ pharos_app_root }};
                passenger_app_env {{ RAILS_ENV }};
                passenger_friendly_error_pages off;
                passenger_intercept_errors on;

                location ^~ /assets/ {
                     gzip_static on;
                     expires max;
                     add_header Cache-Control public;
                  }
                  location / {
                  if ($request_method = 'OPTIONS') {
                    add_header 'Access-Control-Allow-Origin' '*';
                    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                    #
                    # Custom headers and headers various browsers *should* be OK with but aren't
                    #
                    add_header 'Access-Control-Allow-Headers' 'x-pharos-api-user,x-pharos-api-key,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                    #
                    # Tell client that this pre-flight info is valid for 20 days
                    #
                    add_header 'Access-Control-Max-Age' 1728000;
                    add_header 'Content-Type' 'text/plain; charset=utf-8';
                    add_header 'Content-Length' 0;
                    return 204;
                  }
                 if ($request_method = 'POST') {
                    add_header 'Access-Control-Allow-Origin' '*';
                    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                    add_header 'Access-Control-Allow-Headers' 'x-pharos-api-user,x-pharos-api-key,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                    add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
                  }
                 if ($request_method = 'GET') {
                    add_header 'Access-Control-Allow-Origin' '*';
                    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                    add_header 'Access-Control-Allow-Headers' 'x-pharos-api-user,x-pharos-api-key,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                    add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
                  }
                 }
        nginx_client_max_body_size: 0

        # RBenv
        rbenv:
          env: user
          version: v1.0.0
          ruby_version: 2.4.2
          default_ruby: 2.4.2
          rubies:
            - version: 2.3.1
            - version: 2.4.2

        rbenv_users:
            - "{{system_default_user}}"
        rbenv_group: 'deploy'

        # psql_backup
        pg_hostname: "{{ pharos_db_host }}"
        pg_username: "{{pharos_db_user}}"
        pg_pass: "{{pharos_db_pwd}}"

    roles:
      - {role: common, tags: common}
      - {role: zzet.rbenv, tags: rbenv}
      - {role: cd3ef.nginx, tags: [nginx, passenger, nginx-passenger]}
      - {role: carlosbuenosvinos.ansistrano-deploy, tags: [deploy, pharos]}
      - {role: aptrust.pharos, tags: [pharos, deploy]}
      - {role: psql_backup, tags: [psql_backup]}
    tasks:

    - name: Setup Nginx logging to Graylog.
      import_role:
        name: cd3ef.graylog-docker
        tasks_from: nginx
      tags: always

    - name: whoami
      become: no
      local_action: shell whoami
      register: whobrokeit
      tags: [pharos,slack,deploy]

    - name: Slack to all
      slack:
        token: "{{slack_token}}"
        msg: "{{playbook_name}} deployment on {{ inventory_hostname }}  by user {{whobrokeit.stdout}} completed"
        icon_emoji: ":dog:"
        channel: 'ops'
      tags: [pharos,slack, deploy]
