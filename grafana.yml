-   hosts:
        - apt-ops
        - pharos
    vars_files:
      - "group_vars/vault.yml"
    vars:
        playbook_name: 'grafana'

        use_efs: true
        ops_data: /srv/ops_data
        ops_data_influxdb: "{{ops_data}}/influxdb"
        ops_data_grafana: "{{ops_data}}/grafana"

        # Postgresql
        grafana_psql_db: grafana

        # Grafana
        # grafana_admin_password set by vault.
        APP_ENV: demo
        grafana_root_url: 'https://grafana.aptrust.org'
        grafana_dir_data: "{{ops_data_grafana}}"
        grafana_database:
          type: postgres
          host: 127.0.0.1:5432
          name: "{{grafana_psql_db}}"
          user: "{{grafana_psql_owner}}"
          password: "{{grafana_psql_pwd}}"
          path: "{{ops_data_grafana}}"
        grafana_auth_github: |
            enabled = true
            allow_sign_up = true
            client_id = "{{grafana_auth_github_client_id}}"
            client_secret = "{{grafana_auth_github_client_secret}}"
            scopes = user:email,read:org
            auth_url = https://github.com/login/oauth/authorize
            token_url = https://github.com/login/oauth/access_token
            api_url = https://api.github.com/user
            allow_sign_up = true
            team_ids =
            allowed_organizations = APTrust


        # InfluxDB
        influxdb_data_dir: "{{ops_data_influxdb}}"
        influxdb_hostname: "{{influxdb_host}}"
        influxdb_db: 'icinga2'

        # NGINX Webserver
        install_passenger: false
        content_security_policy: false

        nginx_vhosts:
          - listen: "443 ssl"
            server_name: "grafana.aptrust.org"
            #            root: "{{ ansistrano_deploy_to }}/current/public"
            access_log: "/var/log/nginx/grafana_aptrust_org_access.log"
            error_log: "/var/log/nginx/grafana_aptrust_org_error.log"
            extra_parameters: |
                location / {
                proxy_pass http://localhost:3000;
                proxy_redirect off;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_buffering off;
                }
                ssl    on;
                # SSL Chain if Nginx, SSL cert if Apache2
                ssl_certificate    {{ssl_cert_path}};
                ssl_certificate_key {{ ssl_key_path }};

    roles:
      - {role: common, tags: common}
      - {role: postgresql, tags: postgresql}
      - {role: ansible-influxdb, tags: influxdb}
      - {role: ansiblebit.grafana, tags: grafana}
      - {role: cd3ef.nginx, tags: nginx}


    tasks:
      - name: Create grafana DB user
        postgresql_user: name="{{grafana_psql_owner}}"
                         password="{{grafana_psql_pwd}}"
        tags: postgresql

      - name: Create grafana DB user
        postgresql_db: name="{{grafana_psql_db}}"
                       encoding='UTF-8'
                       owner="{{grafana_psql_owner}}"
                       state=present
        tags: postgresql

      - name: Create OPS data directory
        file:
          path: "{{item.dir}}"
          owner: "{{item.owner | default(system_default_user)}}"
          group: "{{deploy_group}}"
          mode: 0775
          recurse: yes
          state: directory
        with_items:
            - { dir: "{{ops_data}}"}
            - { dir: "{{ops_data}}/influxdb", owner: influxdb }
            - { dir: "{{ops_data}}/grafana", owner: grafana }
        tags: opsdatadir

        # Note: Yes it's not great to give access to ssl key to most users but
        # influx has an issue reading pems. Referencing the ssl_key in the proper
        # directory doesn't work because of file permissions. So I shame
        # influxdb here
      - name: Copy SSL Cert pem
        become: yes
        copy:
          content="{{ssl_key}}{{ssl_chain}}{{ssl_interm_cert}}"
          dest="/etc/ssl/influxdb.pem"
          force=yes
          owner=root
          group=deploy
          mode=0755
        tags: sslcopypem

      - name: Copy SSL Key
        become: yes
        copy:
          content="{{ssl_key}}{{ssl_chain}}{{ssl_interm_cert}}"
          dest="/etc/ssl/influxdb.key"
          force=yes
          owner=root
          group=deploy
          mode=0755
        tags: sslcopypem

      - name: Create icinga2 database
        command: influx --ssl --host={{influxdb_hostname}} -execute 'CREATE DATABASE {{influxdb_db}}'
          #        influxdb_database:
          # hostname: "ops.aptrust.org"
          # database_name: "icinga2"
          # port: "{{influxdb_port}}"
          # username: "{{influxdb_username}}"
          # password: "{{influxdb_password}}"
          # state: present
        tags: influxdbdb

        #     shell:  "curl  --ssl "https://ops.aptrust.org:8086/db?u=root&p=root" -d "{\"name\": \"{{influxdb_db}}\"}"
        # uri:
        #  url: https://ops.aptrust.org:8086/query"
        #  method: POST
        #  body: q=CREATE DATABASE "{{influxdb_db}}"
        #  body_format: json
          #          XPOST http://localhost:8086/query --data-urlencode "q=CREATE DATABASE mydb"


      - name: Check if icinga2 is installed
        shell: icinga2 -V > /dev/null
        register: icinga_installed
        tags: influxdb

      - name: Enable icinga2 influxdbwriter
        shell: icinga2 feature enable {{item}}
        with_items:
          - influxdb
          - perfdata
        when: icinga_installed
        tags: influxdb

      - name: Define influxdb config template
        template:
          src: roles/icinga2-ansible/icinga2-ansible-no-ui/templates/influxdb.conf.j2
          dest: /etc/icinga2/features-available/influxdb.conf
          owner: root
          group: deploy
          mode: 0644
          backup: yes
        tags: influxdb

        #      - name: Allow auth per reverse proxy
        #  blockinfile:
        #  dest: /etc/grafana/grafana.ini
        #  insertafter: "auth.proxy"
        #  content: |
        #    enabled = true
